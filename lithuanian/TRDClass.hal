external inner function Boolean DisplayAdditionalFields();
remote inner function Integer MailAcceptanceStatus(LongInt);
external inner function Boolean IsMoveToCloud(record SetupStatusBlock);
external inner function Boolean IsMoveToCloudB();
external inner function Boolean IsCloudControllerClient();
external inner function string 255 GetCurrentStoreName();
external inner function Boolean CompaniesInClientMode();
external inner function Boolean ProductInDemoMode();
remote inner function string 255 GetCompanyShortCode(string);
external inner function Boolean AnyModuleAvailable(); 
external inner function Boolean AcceptanceStatusColumnTest(string);
external inner function Integer FlipCharCode(Integer,Integer);
external inner procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external inner function boolean AddBicToMasterWindow(integer,var real,var real,real,real,real,real);
external inner function Boolean IsIntEnabActive(var string,var string,var Boolean,var string);
external inner function Boolean TouchScreenLookVertical();
external inner procedure SysEClass_Tool(Integer,var real,var real);
external inner procedure GTransEClass_Tool(Integer,var real,var real);
external inner procedure GTrans2EClass_Tool(Integer,var real,var real,var real);
external inner procedure GBaseEClass_Tool(Integer,var real,var real);
external inner procedure TransGenVClass_Tool(Integer,var real,var real);
external inner procedure GetCurUser(var record UserVc);
external inner procedure JobRClass_LIT();
external inner function string 60 UserDefined(string,string);
external inner procedure ItemStatusUserSettings(string,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean);
external inner function Boolean AllowedInCountry(integer);
external inner function Integer ResourceWindowResourceType();
external inner function Boolean ResPlan_Rental();
external inner function Boolean ResPlan_ProdOperations();
remote inner function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc,var Integer);
external inner function Boolean TouchScreenLook();
external inner procedure ExtractObj(string,var Integer,var string);
external inner function Boolean IsSessionOpen(string,string,Date,Time);
external inner procedure CntNPTSPaymentCurrencies(var Array string,var Array string,var Array Integer,var Array string,var Integer);
remote inner procedure CntPOSCurrencies(var Array string,var Array Boolean,var Integer);
external inner function Boolean CheckOffLineRecords(Boolean);
external inner function string 60 TileUserDefined(string,Integer,var Integer);
external inner function Boolean CUVATNrColumn;
external inner function Integer GetInternetEnablerCountry();
external inner function Integer CntVarietyCode(Integer,var Array string);
external inner function Integer VarietyMatMax(Integer);
external inner function Boolean UseTaxTemplatesforTaxCalc();
remote inner procedure TablesViewWClassDo(record LocalMachineBlock,string,Array string,Array string,Array string,Array string,Array Integer,var Integer,var LongInt);
external inner function string 20 GetMenuCode(string);
external inner procedure DrawModifierButtons(var Integer);
remote inner procedure ForkLiftQueueArray(string,string,var Array string,var Array string,var Array string,var Array string,var Array val,var Array Integer,var Array string,var Integer,Boolean,LongInt,LongInt,string);

external inner function Boolean DisplayLoginButtons();
external inner function Integer LoginShortcutsLines(Integer);
external inner function Integer LoginShortcutsPos(Real,Integer);

external inner procedure DefineTTRRowTypes(Integer);
external inner function real ItemButtons(string,Integer);
external inner procedure HWStoreWClassAddProducts(Integer);
external inner function Boolean HasCharts();
external inner function Boolean HasNewRegistration();
external inner function Boolean ActivityIsForAcceptanceOrFYI(record ActVc,Boolean,Boolean);
// TravelLog
external inner function Integer LoginShortcuts();
external inner function Boolean TestConfigurationEnabler(string);
remote inner function Integer CustomerSalesPaymentTermType(string);
// POS Standalone
external inner function Boolean DefCustCodeSetup();

external inner function Boolean HasInAppsAvailable();
external inner function Integer CountCountries();

// Language functions LIT
external inner function Boolean DisplayLoginKeyPad_LIT();
external inner function string 255 VATZoneEditFieldLabelLIT(Integer);
external inner function real VATZoneButtonsLabelsLIT(real,real,real,real);
external inner procedure LoginButtons2_LIT(Real,Real);
external inner procedure FORMDEF_LIT();
external inner function string 255 DemoMsgWClassTitle_LIT(Boolean,Boolean);
external inner procedure TBEClassDef_LIT();
external inner function string 255 VATZoneNameLIT();
external inner procedure TSERW_LIT();
external inner procedure TSERWNT_LIT();
external inner procedure TSERWTouch_LIT();
external inner procedure TSERWTEST_LIT();
external inner procedure INVFORM_LIT(Boolean);
external inner procedure DisplayRecordDetails_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_LIT(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_LIT();
external inner function string 255 ResMonWClassWindowTitle_LIT();
external inner function string 255 RTMonWClassWindowTitle_LIT();
external inner procedure SetupNightAuditWindowControls_LIT(Boolean);
external inner procedure CURClassDefinitionLIT();
external inner function real DrawPaymentModesButtons_IV_LIT(real);
external inner function real FunctionButtons_LIT(string);
external inner procedure CreditCardWindowHeader_LIT(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_LIT(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_LIT(Real);
external inner procedure CreditCardWindowDeliveryDetail_LIT(Real);
external inner function real DrawPaymentModesButtons_LIT();
external inner procedure DrawBarMenuTiles_LIT(string);
external inner procedure DrawRestPMOtherPay_LIT();
external inner procedure DisplayRecordDetailsRA_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_LIT(var integer,var integer);
external inner procedure OKCancel_LIT();
external inner procedure DefineElearningURLCacheLClass_LIT();
external inner procedure DefineElearningURLCacheDClass_LIT();
external inner function real TravelLogDeductions_LIT(real,real);
external inner procedure LoginButtons_LIT(Real);
external inner procedure FORMDEF2_LIT();
external inner procedure FORMDEF3_LIT();
external inner procedure ARS2RClass_LIT();
external inner procedure ALLVATRClass_LIT();

external inner function Boolean IsStandardUnused();
external inner function Boolean IsEnterprise();
external inner function Boolean StandardHansa();
external inner function Boolean HasATOL();

external inner function Boolean HasAccPeriods();
external inner function Boolean HasAccessGroups();
external inner function Boolean HasAddFee();
external inner function Boolean HasApprovals();
external inner function Boolean HasCCPayments();
external inner function Boolean HasAdvancedAccounting();
external inner function Boolean HasAdvancedCRM();
external inner function Boolean HasAdvancedPricing();
external inner function Boolean HasAdvancedProduction();
external inner function Boolean HasAdvancedStock();
external inner function Boolean HasAged();
external inner function Boolean HasBar();
external inner function Boolean HasBase2();
external inner function Boolean HasBranch();
external inner function Boolean HasBuyBack();
external inner function Boolean HasCategories();
//external inner function Boolean HasConsigmentStock();
external inner function Boolean HasCommunicator();
external inner function Boolean HasConsignmentStock();
external inner function Boolean HasContactClassification();
external inner function Boolean HasContactRelations();
external inner function Boolean HasConsolidation();
external inner function Boolean HasCountryPerCustomer();
external inner function Boolean HasCreditLimit();
external inner function Boolean HasCustItem();
external inner function Boolean HasCustomerSearchKey();
external inner function Boolean HasDownpayments();
external inner function Boolean HasDefineColumns();
external inner function Boolean HasDeliveryAddress();
external inner function Boolean HasDepartments();
external inner function Boolean HasETaxDocuments();
external inner function Boolean HasEInvoicing();
external inner function Boolean HasEndorsedChecks();
external inner function Boolean HasExtraNLComment();
external inner function Boolean HasExtTax();
external inner function Boolean HasFavouriteActTypes();
external inner function Boolean HasFiscalPrinter();
external inner function Boolean HasFormEditor();
external inner function Boolean HasFreightAdvanced();
external inner function Boolean HasHideCostPrice();
external inner function Boolean HasHotelInterface();
external inner function Boolean HasGuestUserDefined();
external inner function Boolean HasJewelleryInterface();
external inner function Boolean HasIncomeAndExpenseBook();
external inner function Boolean HasIOUChecks();
external inner function Boolean HasItemClassification();
external inner function Boolean HasItemGroups();
external inner function Boolean HasKPIs();
external inner function Boolean HasLanguages();
external inner function Boolean HasLimitedAccess();
external inner function Boolean HasLocalMachines();
external inner function Boolean HasLoyaltyCards();
external inner function Boolean HasMailTags();
external inner function Boolean HasMainPartner();
external inner function Boolean HasMultiCurrency();
external inner function Boolean HasMultiLocations();
external inner function Boolean HasNLBudget();
external inner function Boolean HasNLBudgetClass();
external inner function Boolean HasObjects();
external inner function Boolean HasInvoiceOfficialSerNr();
external inner function Boolean HasOfficialSerNr();
external inner function Boolean HasOrderClasses();
external inner function Boolean HasPreferedOfficialSerNr();
external inner function Boolean HasNumberSeries();
external inner function Boolean HasPersons();
external inner function Boolean HasPocketScreen();
external inner function Boolean HasPositions();
external inner function Boolean HasPrepayments();
external inner function Boolean HasProjects();
external inner function Boolean HasPriceLists();
external inner function Boolean HasQualityControl();
external inner function Boolean HasReconLevel2();
external inner function Boolean HasReminderLevel();
external inner function Boolean HasRemoteBackup();
external inner function Boolean HasResourceDisplayGroups();
external inner function Boolean HasRussianPrepayment();
external inner function Boolean HasRetGoodsToSupp();
external inner function Boolean HasReturnedGoods();
external inner function Boolean HasRoute();
external inner function Boolean HasSalesman();
external inner function Boolean HasSalesmanBonus();
external inner function Boolean HasSalesGroup();
external inner function Boolean HasSecondQuantity();
external inner function Boolean HasSerialNumbers();
external inner function Boolean HasServerInCloud();
external inner function Boolean HasSettlementDiscount();
external inner function Boolean HasSimulations();
external inner function Boolean hasSimAccruals();
external inner function Boolean HasSkypeConnection();
external inner function Boolean HasSIPServerConnection();
external inner function Boolean HasStrAsSignFType();
external inner function Boolean HasTouchScreenDevice();
external inner function Boolean HasTaxMatrix();
external inner function Boolean HasTestFeatures();
external inner function Boolean HasMetroTestFeatures();
external inner function Boolean HasWorkOrders();
external inner function Boolean HasThrouLocation();
external inner function Boolean HasTouchScreenLook();
external inner function Boolean HasTREO();
external inner function Boolean HasVarieties();
external inner function Boolean HasVATZone();
external inner function Boolean HasWithholdingTax();
external inner function Boolean HasWithholdingTaxAdvanced();
external inner function Boolean HasWorkOrders();

external inner function Boolean HasStandardCRM();
external inner function Boolean HasStandardOrganizer();
external inner function Boolean HasStandardCommunicator();

external inner function Boolean HasEMail();
external inner function Boolean HasExternalEMail();

external inner function Boolean HasModAT2();
external inner function Boolean HasModBA();
external inner function Boolean HasModCheck();
external inner function Boolean HasModCL();
external inner function Boolean HasModCO();
external inner function Boolean HasModCons();
external inner function Boolean HasModCourses();
external inner function Boolean HasModCredMan();
external inner function Boolean HasModCRM();
external inner function Boolean HasModEDI();
external inner function Boolean HasModExp();
external inner function Boolean HasModHotel();
external inner function Boolean HasModHRM();
external inner function Boolean HasModIN();
external inner function Boolean HasModIntStock();
external inner function Boolean HasModNL();
external inner function Boolean HasPaymentGateway();
external inner function Boolean HasModPO();
external inner function Boolean HasModPOS();
external inner function Boolean HasModPL();
external inner function Boolean HasModPOProg();
external inner function Boolean HasModPP();
external inner function Boolean HasModProd();
external inner function Boolean HasModQT();
external inner function Boolean HasModRent();
external inner function Boolean HasModRest();
external inner function Boolean HasModRsrt();
external inner function Boolean HasModSO();
external inner function Boolean HasModSL();
external inner function Boolean HasModSVO();
external inner function Boolean HasModTS();
external inner function Boolean HasModWHM();
external inner function Boolean HasModDI();
external inner function Boolean UsePostOKButton();
external inner function Boolean HasBankImport();
external inner function Boolean HasPLIntegratedWithNL();
external inner function Boolean HasSLIntegratedWithNL();
external inner function Boolean HasIntegratedNL();
external inner function Boolean HasConsStockMoveInvoices();

procedure dummy()//##ii
begin//##ii
  SetLangMode(LangLithuanian,"LIT",2);//##ii
  return;//##ii
end;//##ii
//##ii

window TRDClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs,ve,hpos;
  Integer f,flipnr,rownr;
  
  //nk 14.03.2019 cust start
  rownr = 2000; //600
  //nk 14.03.2019 cust end

  ve = 400;
  WindowBegin("Operacija",TRDClass,CGview,-);
  if (IsStandardProduct) then begin
    if (GetFeatureState("HasModNL")==kFeatureTrial) then begin
      rownr = 10;
      ve = 360;
      AutoSizeWindow(false);
    end else begin
      Sizeable(-1,-1,0,0);
    end;
  end else begin
    Sizeable(-1,-1,0,0);
  end;
  if (HasExtraNLComment) then begin
    SetWRect(20,80,900,ve);
  end else begin
    SetWRect(20,80,740,ve);
  end;
  UseView(TRVc);
  FormName(PrintTRD);
  ActiveFieldOnNew("TransDate");
  vs=20;
  if (HasNumberSeries) then begin
  EditField(80,v=6,80, "Nr.",Normal,Number,false,TSerSClass);
  end else begin
    EditField(80,v=6,80,"Nr.",Normal,Number,false,0); 
  end;
  EditField(250,v,82,"Oper. data",Normal,TransDate,false,PasteCurDate);
  EnterSkip(Comment);
  EditField(426,v,-40,"Nuoroda",Normal,RefStr,false,0);
//  EditField(570,v,80,"Doc No.",Normal,SeqNr,false,0);
  EditField(80,v+=vs,-40,"Tekstas",Normal,Comment,false,0);
//  CheckBox(450,v,0,"Eksportuotas",Expf);
  EnterSkip(Math);
  if (HasBase2) then begin
  EditField(120,  -41,88,"Baz.val.1 skirtumas",ViewOnly,DiffVal,true,0);
  end else begin
    EditField(120,-41,88,"Skirtumas",ViewOnly,DiffVal,true,0); 
  end;
  if (HasBase2 or HasMultiCurrency) then begin
    EditField(-250,-41,88,"Viso",ViewOnly,DSum,true,0); 
    EditField(-157,-41,88,"",ViewOnly,CSum,true,0); 
  if (HasBase2) then begin
  EditField(120,  -21,88,"Baz.val.2 skirtumas",ViewOnly,Diff2Val,true,0);
      EditField(-250,-21,88,"Viso",ViewOnly,DSum2,true,0);
      EditField(-157,-21,88,"",ViewOnly,CSum2,true,0); 
    end;
  end else begin
    EditField(-240,-41,88,"Viso",ViewOnly,DSum,true,0); 
    EditField(-147,-41,88,"",ViewOnly,CSum,true,0); 
    if (HasBase2) then begin
      EditField(120, -21,88,"Baz.val.2 skirtumas",ViewOnly,Diff2Val,true,0); 
      EditField(-250,-21,88,"Viso",ViewOnly,DSum2,true,0); 
      EditField(-157,-21,88,"",ViewOnly,CSum2,true,0); 
    end;
  end;
  h=4; v=v+(vs+17);
  if (IsStandardProduct) then begin
    if (HasMultiCurrency or HasBase2) then begin
      MatrixBegin(5,vm=v,-50,-46,-,rownr);
    end else begin
      MatrixBegin(5,vm=v,-25,-46,-,rownr);
    end;
  end else begin
    MatrixBegin(5,vm=v,-50,-46,-,rownr);
  end;
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,hpos=32,"Sąskaita",0,AccNumber,false,AccSClass); hpos = hpos + 69;
  if (HasObjects) then begin
  MatCol(1,hpos,"Objektai",0,Objects,false,ObjSClass); hpos = hpos + 140;
//  MatCol(1,-400,"Trumpas",0,ACShort,false,ACShortSClass); // what the hell is this? Karl
     MatCol(1,hpos,"Aprašymas",0,Comment,false,0); hpos = hpos + 160; // -349    
  if (HasExtraNLComment) then begin
     MatCol(1,hpos,"Papildomas aprašymas",0,ExtraComment,false,0); hpos = hpos + 130; // -349  
  end;
  end else begin
//  MatCol(1,-400,"Short.",0,ACShort,false,ACShortSClass); // what the hell is this? Karl
    MatCol(1,hpos,"Aprašymas",0,Comment,false,0);  hpos = hpos + 130; // -349
    if (HasExtraNLComment) then begin
      if (HasLocalization("POL")) then begin
        MatCol(1,hpos,"Papildomas apibūdinimas",0,ExtraComment,false,0); hpos = hpos + 100; // -349 
      end else begin
      MatCol(1,hpos,"Papild. apraš.",0,ExtraComment,false,0); hpos = hpos + 130; // -349
    end;
  end;
  end;
  if (HasLocalization("GBR,LTU,POL")) then begin
    if (HasMultiCurrency) then begin
      MatCol(1,-240,"Bazinis 1 debetas",0,DebVal,true,0);
      MatCol(1,-150,"Bazinis 1 kreditas",0,CredVal,true,0);
    end else begin
      MatCol(1,-240,"Debetas",0,DebVal,true,0); 
      MatCol(1,-150,"Kreditas",0,CredVal,true,0); 
    end;
    MatCol(1,-60,"#V-Cd#",0,VATCode,false,VATCodeSClass);
    MatCol(1,-30,"Rvrs",0,RvrsVATCode,false,VATCodeSClass);
  end else begin
  if (HasMultiCurrency) then begin
     MatCol(1,-210,"Debetas",0,DebVal,true,0);
     MatCol(1,-120,"Kreditas",0,CredVal,true,0);
  end else begin
    MatCol(1,-210,"Debetas",0,DebVal,true,0); 
    MatCol(1,-120,"Kreditas",0,CredVal,true,0); 
    end;
  MatCol(1,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
  end;
  MatText(2,32,"Parašas",true);
  MatColTL(2,108,"",0,M4Code,ViewOnly,0,Sign,false,0);
  MatText(2,160,"Senos oper. data",true);
  MatColTL(2,290,"",0,-1,ViewOnly,-1,OldTransDate,false,0);
  MatText(3,32,"Taisomos oper. nr.",true);
  MatColTL(3,215,"",0,M4AppCode,ViewOnly,0,CorrNr,false,0);
  MatText(3,315,"Data",true);
  MatCol(3,385,"",0,CorrDate,false,0);
  MatText(4,32,"Pataisytos oper. nr.",true);
  MatColTL(4,215,"",0,M4AppCode,Normal,0,CorrNr,false,0);
  if (HasBase2) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,hpos=32,"Sąskaita",0,AccNumber,false,AccSClass); hpos = hpos + 69;
    if (HasObjects) then begin
      MatCol(1,hpos,"Objektai",0,Objects,false,ObjSClass); hpos = hpos + 140;
    end else begin
      MatCol(1,hpos,"Aprašymas",0,Comment,false,0); hpos = hpos + 160;
    end;
  MatCol(1,-400,"Debetas",0,DebVal,true,0);
  MatCol(1,-300,"Kreditas",0,CredVal,true,0);
  MatCol(1,-200,"Debetas 2",0,DebVal2,true,0);
  MatCol(1,-100,"Kreditas 2",0,CredVal2,true,0);
  MatText(2,32,"Parašas",true);
  MatCol(2,108,"",0,Sign,false,0);
  MatText(2,160,"Senos oper. data",true);
  MatColTL(2,290,"",0,-1,ViewOnly,-1,OldTransDate,false,0);
  MatText(3,32,"Taisomos oper. nr.",true);
  MatColTL(3,215,"",0,M4AppCode,ViewOnly,0,CorrNr,false,0);
  MatText(3,315,"Data",true);
  MatCol(3,385,"",0,CorrDate,false,0);
  MatText(4,32,"Pataisytos oper. nr.",true);
  MatColTL(4,215,"",0,M4AppCode,Normal,0,CorrNr,false,0);
  end;
  if (HasMultiCurrency) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,hpos=32,"Sąskaita",0,AccNumber,false,AccSClass); hpos = hpos + 69;
    if (HasObjects) then begin
  MatCol(1,hpos,"Objektai",0,Objects,false,ObjSClass); hpos = hpos + 140;
   end else begin
  MatCol(1,hpos,"Aprašymas",0,Comment,false,0); hpos = hpos + 160;    
    end;
    if (HasBase2) then begin
  MatCol(1,-410,"Debetas",0,DebVal,true,0);
  MatCol(1,-330,"Kreditas",0,CredVal,true,0);
    end else begin
      MatCol(1,-410,"Debetas",0,DebVal,true,0); 
      MatCol(1,-330,"Kreditas",0,CredVal,true,0); 
    end;
  MatCol(1,-250,"Valiuta",0,Curncy,false,CurncyCodeSClass);
  MatCol(1,-200,"Debetas valiuta",0,CurDebVal,true,0);
  MatCol(1,-100,"Kreditas valiuta",0,CurCredVal,true,0);
  MatText(2,32,"Parašas",true);
  MatCol(2,108,"",0,Sign,false,0);
  MatText(2,160,"Senos oper. data",true);
  MatColTL(2,290,"",0,-1,ViewOnly,-1,OldTransDate,false,0);
  MatText(3,32,"Taisomos oper. nr.",true);
  MatColTL(3,215,"",0,M4AppCode,ViewOnly,0,CorrNr,false,0);
  MatText(3,315,"Data",true);
  MatCol(3,385,"",0,CorrDate,false,0);
  MatText(4,32,"Pataisytos oper. nr.",true);
  MatColTL(4,215,"",0,M4AppCode,Normal,0,CorrNr,false,0);
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,hpos=32,"Sąskaita",0,AccNumber,false,AccSClass); hpos = hpos + 69;
    if (HasObjects) then begin
  MatCol(1,hpos,"Objektai",0,Objects,false,ObjSClass);  hpos = hpos + 140;
    end else begin
  MatCol(1,hpos,"Aprašymas",0,Comment,false,0); hpos = hpos + 160;    
    end;
    if (HasBase2) then begin
      MatCol(1,-400,"Valiuta",0,Curncy,false,CurncyCodeSClass); 
  MatCol(1,-350,"Kursas 1",0,BaseRate1,true,0);
  MatCol(1,-280,"Kursas 2",0,BaseRate2,true,0);
    end else begin
      MatCol(1,-300,"Valiuta",0,Curncy,false,CurncyCodeSClass); 
    end;
  MatCol(1,-210,"Pagal kursą",0,FrRate,true,0);
  MatCol(1,-140,"Kursui 1",0,ToRateB1,true,0);
    if (HasBase2) then begin
  MatCol(1,-70,"Kursui 2",0,ToRateB2,true,0);
    end;
  MatText(2,32,"Parašas",true);
  MatCol(2,108,"",0,Sign,false,0);
  MatText(2,160,"Senos oper. data",true);
  MatColTL(2,290,"",0,-1,ViewOnly,-1,OldTransDate,false,0);
  MatText(3,32,"Taisomos oper. nr.",true);
  MatColTL(3,215,"",0,M4AppCode,ViewOnly,0,CorrNr,false,0);
  MatText(3,315,"Data",true);
  MatCol(3,385,"",0,CorrDate,false,0);
  MatText(4,32,"Pataisytos oper. nr.",true);
  MatColTL(4,215,"",0,M4AppCode,Normal,0,CorrNr,false,0);
  end;
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,32,"T",0,Typ,false,SetSClass);
  MatCol(1,52,"Nr.",0,SerNr,false,ARSClass);
  MatCol(1,112,"Apmok. data",0,DueDate,false,PasteCurDate);
  MatCol(1,184,"Įmonė",0,CompCode,false,CUSClass);
  if (HasExtraNLComment) then begin
  MatCol(1,-550,"Aprašymas",0,Comment,false,0); 
  MatCol(1,-410,"Papildomas aprašymas",0,ExtraComment,false,0); 
  end else begin
  MatCol(1,-400,"Aprašymas",0,Comment,false,0);
  end;
  MatCol(1,-290,"Sąskaita",0,AccNumber,false,AccSClass);
  MatCol(1,-210,"Debetas",0,DebVal,true,0);
  MatCol(1,-120,"Kreditas",0,CredVal,true,0);
  MatCol(1,-30,"PVM kd.",0,VATCode,false,VATCodeSClass);
  MatText(2,32,"Parašas",true);
  MatCol(2,108,"",0,Sign,false,0);
  MatText(2,160,"Senos oper. data",true);
  MatColTL(2,290,"",0,-1,ViewOnly,-1,OldTransDate,false,0);
  MatText(3,32,"Taisomos oper. nr.",true);
  MatColTL(3,215,"",0,M4AppCode,ViewOnly,0,CorrNr,false,0);
  MatText(3,315,"Data",true);
  MatCol(3,385,"",0,CorrDate,false,0);
  MatText(4,32,"Pataisytos oper. nr.",true);
  MatColTL(4,215,"",0,M4AppCode,Normal,0,CorrNr,false,0);
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,32,"Sąskaita",0,AccNumber,false,AccSClass);
    if (HasObjects) then begin
  MatCol(1,98,"Objektai",0,Objects,false,ObjSClass);
    end;
  if (HasExtraNLComment) then begin
  MatCol(1,-590,"Aprašymas",0,Comment,false,0); 
  MatCol(1,-450,"Papildomas aprašymas",0,ExtraComment,false,0); 
  end else begin
  MatCol(1,-420,"Aprašymas",0,Comment,false,0);
  end;
  MatCol(1,-330,"Nominalas",0,NomVal,true,0);
  MatCol(1,-230,"Debetas",0,DebVal,true,0);
  MatCol(1,-130,"Kreditas",0,CredVal,true,0);
  MatCol(1,-30,"Koresp.",0,CorspSer,false,0);
  MatText(2,32,"Parašas",true);
  MatCol(2,108,"",0,Sign,false,0);
  MatText(2,160,"Senos op. data",true);
  MatColTL(2,290,"",0,-1,ViewOnly,-1,OldTransDate,false,0);
  MatText(3,32,"Pataisyta operacija",true);
  MatColTL(3,215,"",0,M4AppCode,ViewOnly,0,CorrNr,false,0);
  MatText(3,315,"Reg. data",true);
  MatCol(3,385,"",0,CorrDate,false,0);
  MatText(4,32,"Operacijos pataisymas",true);
  MatColTL(4,215,"",0,M4AppCode,Normal,0,CorrNr,false,0);
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,32,"Sąskaita",0,AccNumber,false,AccSClass);
    if (HasObjects) then begin
  MatCol(1,98,"Objektai",0,Objects,false,ObjSClass);
    end;
  if (HasExtraNLComment) then begin
  MatCol(1,-550,"Aprašymas",0,Comment,false,0); 
  MatCol(1,-380,"Papildomas aprašymas",0,ExtraComment,false,0); 
  end else begin
  MatCol(1,-420,"Aprašymas",0,Comment,false,0);
  end;
    if (StandardHansa==false) then begin
  MatCol(1,-260,"Mokest. sąsk.",0,TAccNumber,false,TAccSClass);
  MatCol(1,-180,"Kiekis",0,Qty,true,0);
    MatCol(1,-100,"SAFT tipas",0,SAFTType,false,SetSClass);
    end;
  MatText(2,32,"Parašas",true);
  MatCol(2,108,"",0,Sign,false,0);
  MatText(2,160,"Senos op. data",true);
  MatColTL(2,290,"",0,-1,ViewOnly,-1,OldTransDate,false,0);
  MatText(3,32,"Pataisyta operacija",true);
  MatColTL(3,215,"",0,M4AppCode,ViewOnly,0,CorrNr,false,0);
  MatText(3,315,"Reg. data",true);
  MatCol(3,385,"",0,CorrDate,false,0);
  MatText(4,32,"Operacijos pataisymas",true);
  MatColTL(4,215,"",0,M4AppCode,Normal,0,CorrNr,false,0);
  end;
  InsertRowTest;
  DeleteRowTest;
  EndMatrix;
  vs = 20;
  v = vm + 1; 
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1)); 
      v = v + vs;
    end;
  end;
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
  SpecialMenu("Subalansuoti operaciją",'B',0,"BalanceTRDsm");
  SpecialMenu("Sukeisti debetą su kreditu",' ',1,"SwapDCTRDsm");
    SpecialMenu("Koregavimo žymė",' ',3,"CorrectionMarkTRDsm"); 
    SpecialMenu("Atidaryti pirminį įrašą",'t',6,"OpenSubsystemTRDsm"); 
    if (HasMultiCurrency) then begin
      SpecialMenu("Atnaujinti valiutų kursus",' ',7,"UpdCurRateTRDsm"); 
    end;
  end else begin
  SpecialMenu("Subalansuoti operaciją",'B',0,"BalanceTRDsm"); 
  SpecialMenu("Sukeisti debetą su kreditu",' ',1,"SwapDCTRDsm"); 
//    if (HasIntegratedNL) then begin
    if (true) then begin
  SpecialMenu("Atnaujinimo žymė",' ',2,"UpdateMarkTRDsm");
  SpecialMenu("Pataisymo žymė",' ',3,"CorrectionMarkTRDsm");
    end;
  SpecialMenu("Skaičiuoti lauką",'F',4,"CalcFieldTRDsm");
  SpecialMenu("Pakeisti Ženklą",' ',5,"ChangeSignTRDsm");
    if (HasIntegratedNL) then begin
  SpecialMenu("Atidaryti pirminį įrašą",'t',6,"OpenSubsystemTRDsm");
    end;
  if (HasMultiCurrency) then begin
  SpecialMenu("Atnaujinti valiutų kursus",' ',7,"UpdCurRateTRDsm");
  end;
	SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
	SpecialMenu("Pridėti sąskaitą",' ',0,"AddAccountQTDsm");
  end;
  EndWindow;
end;


window MonthResRClass:1 
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm;
  WindowBegin("Set your income statement on a monthly basis",MonthResRClass,CGRcW,RcType);
  SetWRect(20,80,580,250);
  PeriodField(h=150,v=6,"Period (max.12 months)");
  if (HasObjects) then begin
  EditFieldTL(h,v+=20,150,"Object",M4UStr,Normal,60 ,ObjStr,false,ObjSClass);
  EditFieldTL(h,v+=20,50,"Object type",M4UStr,Normal,5 ,ObjType,false,OTSClass);
  end;
  vm=v;
  if (HasMultiCurrency) then begin
  EditField(h,v+=20,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  end;
  if (HasLanguages) then begin
  EditField(h,v+=20,50,"Language",Normal,Language,false,LangSClass);  
  end;
  EditFieldTL(395,6,120,"Header",M4Str,Normal,60 ,f1,false,0);
  ButtonFrame(h=395,v=vm,123,5,"Accounts");
  RadioButton(h,v,0,0,"Everything",AccSpec);
  RadioButton(h,v+=16,1,0,"Only used",AccSpec);
  if (HasAdvancedAccounting or HasLocalization("FIN")) then begin
  RadioButton(h,v+=16,2,0,"Only groups",AccSpec);
  RadioButton(h,v+=16,3,0,"groups",AccSpec);
  RadioButton(h,v+=16,4,0,"with a balance",AccSpec);
  end;
  EndFrame;
  if (HasBase2) then begin
  ButtonFrame(h=230,v=vm+30,123,2,"Values");
  RadioButton(h,v,0,0,"Curncy 1",basecurncy);
  RadioButton(h,v+=16,1,0,"Curncy 2",basecurncy);
  end;
  EndWindow;
end;