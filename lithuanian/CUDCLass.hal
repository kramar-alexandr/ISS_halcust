external inner procedure SetupColumWithKeypadWindow(var real,var real,var real,var real,var real,var real,var real);
external inner function Integer POSFontSize();
external inner function string 255 F_Label(string);
external inner procedure SplitButton(LongInt,LongInt,LongInt,LongInt,LongInt,string,string,string,string,LongInt);
external inner procedure POSKeyPad(LongInt,LongInt,LongInt,LongInt,LongInt,string); //##cc
external inner function string 255 GetChangePaswordLink();
remote function UUID GetServerUUIDRemote();
external inner function string 255 RemainingEinvoicesQuantity;
external inner function Boolean DisplayAdditionalFields();
remote function Integer MailAcceptanceStatus(LongInt);
external inner function Boolean IsMoveToCloud(record SetupStatusBlock);
external inner function Boolean IsMoveToCloudB();
//external inner outer function Boolean IsCloudControllerClient(); //##cc
external inner function string 255 GetCurrentStoreName();
external inner function Boolean CompaniesInClientMode();
external inner function Boolean ProductInDemoMode();
remote function string 255 GetCompanyShortCode(string);
external inner function Boolean AnyModuleAvailable();
external inner function Boolean AcceptanceStatusColumnTest(string);
external inner function Integer FlipCharCode(Integer,Integer);
external inner procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external inner function boolean AddBicToMasterWindow(integer,var real,var real,real,real,real,real);
external inner function Boolean IsIntEnabActive(var string,var string,var Boolean,var string);
external inner function Boolean TouchScreenLookVertical();
external inner procedure SysEClass_Tool(Integer,var real,var real);
external inner procedure GTransEClass_Tool(Integer,var real,var real);
external inner procedure GTrans2EClass_Tool(Integer,var real,var real,var real);
external inner procedure GBaseEClass_Tool(Integer,var real,var real);
external inner procedure TransGenVClass_Tool(Integer,var real,var real);
external inner procedure GetCurUser(var record UserVc);
external inner function string 60 UserDefined(string,string);
external inner function string 60 RestPMCashModePayMode();
//external inner outer function string 255 MasterBannerURL();
external inner procedure ItemStatusUserSettings(string,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean);
external inner function Boolean AllowedInCountry(integer);
external inner function Integer ResourceWindowResourceType();
external inner function Boolean ResPlan_Rental();
external inner function Boolean ResPlan_ProdOperations();
external inner function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc);
external inner function Boolean ReadNPTSWindowData(string,string,longint,string,string,Date,Time,var Boolean,var string,var string,var string,var record POSButtonsVc);
external inner function Boolean TouchScreenLook();
external inner procedure ExtractObj(string,var Integer,var string);
external inner function Boolean IsSessionOpen(string,string,Date,Time);
external inner procedure CntNPTSPaymentCurrencies(var Array string,var Array string,var Array Integer,var Array string,var Integer);
remote procedure CntPOSCurrencies(var Array string,var Array Boolean,var Integer);
external inner function Boolean CheckOffLineRecords(Boolean);
external inner function string 60 TileUserDefined(string,Integer,var Integer);
external inner function Boolean CUVATNrColumn;
external inner function Integer GetInternetEnablerCountry();
external inner function Integer CntVarietyCode(Integer,var Array string);
external inner function Integer VarietyMatMax(Integer);
external inner function Boolean UseTaxTemplatesforTaxCalc();
remote procedure TablesViewWClassDo(record LocalMachineBlock,string,Array string,Array string,Array string,Array string,Array Integer,var Integer,var LongInt);
external inner function string 20 GetMenuCode(string);
external inner procedure DrawModifierButtons(var Integer);
remote procedure ForkLiftQueueArray(string,string,var Array string,var Array string,var Array string,var Array string,var Array val,var Array Integer,var Array string,var Integer,Boolean,LongInt,LongInt,string);

external inner function Boolean DisplayLoginButtons();
external inner function Integer LoginShortcutsLines(Integer);
external inner function Integer LoginShortcutsPos(Real,Integer);

external inner procedure DefineTTRRowTypes(Integer);
external inner function real ItemButtons(string,Integer);
external inner procedure HWStoreWClassAddProducts(Integer);
external inner function Boolean HasYodlee();
external inner function Boolean HasAvalara();
external inner function Boolean HasCharts();
external inner function Boolean HasDetailedCharts();
external inner function Boolean HasNewRegistration();
external inner function Boolean ActivityIsForAcceptanceOrFYI(record ActVc,Boolean,Boolean);
// TravelLog
external inner function Integer LoginShortcuts();
external inner function Boolean TestConfigurationEnabler(string);
remote function Integer CustomerSalesPaymentTermType(string);
// POS Standalone
external inner function Boolean DefCustCodeSetup();
// in-apps
external inner function Boolean HasInAppsAvailable();
external inner function Integer CountCountries();

// Language functions EST
external inner function Boolean DisplayLoginKeyPad_EST();
external inner function string 255 VATZoneEditFieldLabel_EST(Integer);
external inner function real VATZoneButtonsLabelsEST(real,real,real,real);
external inner function real VATZoneButtonsLabelsLIT(real,real,real,real);

external inner procedure LoginButtons2_EST(Real,Real);
external inner procedure FORMDEF_EST();
external inner function string 255 DemoMsgWClassTitle_EST(Boolean,Boolean);
external inner procedure TBEClassDef_EST();
external inner function string 255 VATZoneNameEST();
external inner procedure TSERW_EST();
external inner procedure TSERWNT_EST();
external inner procedure TSERWTouch_EST();
external inner procedure TSERWTEST_EST();
external inner procedure INVFORM_EST(Boolean);
external inner procedure DisplayRecordDetails_EST(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_EST(string,string,record POSButtonsVc,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_EST(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_EST();
external inner function string 255 ResMonWClassWindowTitle_EST();
external inner function string 255 RTMonWClassWindowTitle_EST();
external inner procedure SetupNightAuditWindowControls_EST(Boolean);
external inner procedure CURClassDefinitionEST();
external inner function real DrawPaymentModesButtons_IV_EST(real);
external inner function real FunctionButtons_EST(string);
external inner procedure CreditCardWindowHeader_EST(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_EST(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_EST(Real);
external inner procedure CreditCardWindowDeliveryDetail_EST(Real);
external inner function real DrawPaymentModesButtons_EST();
external inner procedure DrawBarMenuTiles_EST(string);
external inner procedure DrawRestPMOtherPay_EST();
external inner procedure DisplayRecordDetailsRA_EST(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_EST(var integer,var integer);
external inner procedure OKCancel_EST();
external inner procedure DefineElearningURLCacheLClass_EST();
external inner procedure DefineElearningURLCacheDClass_EST();
external inner function real TravelLogDeductions_EST(real,real);
external inner procedure LoginButtons_EST(Real);
external inner procedure FORMDEF2_EST();
external inner procedure FORMDEF3_EST();
external inner procedure ARS2RClass_EST();
external inner procedure ALLVATRClass_EST();

external inner function Boolean IsStandardUnused();
external inner function Boolean IsEnterprise();
external inner function Boolean StandardHansa();
external inner function Boolean HasATOL();

external inner function Boolean HasAccPeriods();
external inner function Boolean HasAccessGroups();
external inner function Boolean HasAddFee();
external inner function Boolean HasApprovals();
external inner function Boolean HasCCPayments();
external inner function Boolean HasAdvancedAccounting();
external inner function Boolean HasAdvancedCRM();
external inner function Boolean HasAdvancedPricing();
external inner function Boolean HasAdvancedProduction();
external inner function Boolean HasAdvancedStock();
external inner function Boolean HasAged();
external inner function Boolean HasBar();
external inner function Boolean HasBase2();
external inner function Boolean HasBranch();
external inner function Boolean HasBuyBack();
external inner function Boolean HasCategories();
//external inner function Boolean HasConsigmentStock();
external inner function Boolean HasCommunicator();
external inner function Boolean HasConsignmentStock();
external inner function Boolean HasContactClassification();
external inner function Boolean HasContactRelations();
external inner function Boolean HasConsolidation();
external inner function Boolean HasCountryPerCustomer();
external inner function Boolean HasCreditLimit();
external inner function Boolean HasCustItem();
external inner function Boolean HasCustomerSearchKey();
external inner function Boolean HasCustomerStatusReport();
external inner function Boolean HasDownpayments();
external inner function Boolean HasDefineColumns();
external inner function Boolean HasDeliveryAddress();
external inner function Boolean HasDepartments();
external inner function Boolean HasETaxDocuments();
external inner function Boolean HasEInvoicing();
external inner function Boolean HasEndorsedChecks();
external inner function Boolean HasExtraNLComment();
external inner function Boolean HasExtTax();
external inner function Boolean HasFavouriteActTypes();
external inner function Boolean HasFiscalPrinter();
external inner function Boolean HasFormEditor();
external inner function Boolean HasFreightAdvanced();
external inner function Boolean HasHideCostPrice();
external inner function Boolean HasHotelInterface();
external inner function Boolean HasGuestUserDefined();
external inner function Boolean HasJewelleryInterface();
external inner function Boolean HasIncomeAndExpenseBook();
external inner function Boolean HasIOUChecks();
external inner function Boolean HasItemClassification();
external inner function Boolean HasItemGroups();
external inner function Boolean HasKPIs();
external inner function Boolean HasLanguages();
external inner function Boolean HasLimitedAccess();
external inner function Boolean HasLocalMachines();
external inner function Boolean HasLoyaltyCards();
external inner function Boolean HasMailTags();
external inner function Boolean HasMainPartner();
external inner function Boolean HasMultiCurrency();
external inner function Boolean HasMultiLocations();
external inner function Boolean HasNLBudget();
external inner function Boolean HasNLBudgetClass();
external inner function Boolean HasObjects();
external inner function Boolean HasInvoiceOfficialSerNr();
external inner function Boolean HasOfficialSerNr();
external inner function Boolean HasOrderClasses();
external inner function Boolean HasPreferedOfficialSerNr();
external inner function Boolean HasNumberSeries();
external inner function Boolean HasPersons();
external inner function Boolean HasPocketScreen();
external inner function Boolean HasPositions();
external inner function Boolean HasPrepayments();
external inner function Boolean HasProjects();
external inner function Boolean HasPriceLists();
external inner function Boolean HasQualityControl();
external inner function Boolean HasReconLevel2();
external inner function Boolean HasReminderLevel();
external inner function Boolean HasRemoteBackup();
external inner function Boolean HasResourceDisplayGroups();
external inner function Boolean HasRussianPrepayment();
external inner function Boolean HasRetGoodsToSupp();
external inner function Boolean HasReturnedGoods();
external inner function Boolean HasRoomPackages();
external inner function Boolean HasRoomTypes();
external inner function Boolean HasRoute();
external inner function Boolean HasSalesman();
external inner function Boolean HasSalesmanBonus();
external inner function Boolean HasSalesGroup();
external inner function Boolean HasSecondQuantity();
external inner function Boolean HasSerialNumbers();
external inner function Boolean HasServerInCloud();
external inner function Boolean HasSettlementDiscount();
external inner function Boolean HasSimulations();
external inner function Boolean hasSimAccruals();
external inner function Boolean HasSkypeConnection();
external inner function Boolean HasSIPServerConnection();
external inner function Boolean HasStrAsSignFType();
external inner function Boolean HasTouchScreenDevice();
external inner function Boolean HasTaxMatrix();
external inner function Boolean HasTestFeatures();
external inner function Boolean HasMetroTestFeatures();
external inner function Boolean HasWorkOrders();
external inner function Boolean HasThrouLocation();
external inner function Boolean HasTouchScreenLook();
external inner function Boolean HasTREO();
external inner function Boolean HasVarieties();
external inner function Boolean HasVATZone();
external inner function Boolean HasWithholdingTax();
external inner function Boolean HasWithholdingTaxAdvanced();
external inner function Boolean HasWorkOrders();
external inner function Boolean HasWorkflowOverview();

external inner function Boolean HasStandardCRM();
external inner function Boolean HasStandardOrganizer();
external inner function Boolean HasStandardCommunicator();

external inner function Boolean HasEMail();
external inner function Boolean HasExternalEMail();

external inner function Boolean HasModAT2();
external inner function Boolean HasModBA();
external inner function Boolean HasModCheck();
external inner function Boolean HasModCL();
external inner function Boolean HasModCO();
external inner function Boolean HasModCons();
external inner function Boolean HasModCourses();
external inner function Boolean HasModCredMan();
external inner function Boolean HasModCRM();
external inner function Boolean HasModEDI();
external inner function Boolean HasModExp();
external inner function Boolean HasModHotel();
external inner function Boolean HasModHRM();
external inner function Boolean HasModIN();
external inner function Boolean HasModIntStock();
external inner function Boolean HasModNL();
external inner function Boolean HasPaymentGateway();
external inner function Boolean HasModPO();
external inner function Boolean HasModPOS();
external inner function Boolean HasModPL();
external inner function Boolean HasModPOProg();
external inner function Boolean HasModPP();
external inner function Boolean HasModProd();
external inner function Boolean HasModQT();
external inner function Boolean HasModRent();
external inner function Boolean HasModRest();
external inner function Boolean HasModRsrt();
external inner function Boolean HasModSO();
external inner function Boolean HasModSL();
external inner function Boolean HasModSVO();
external inner function Boolean HasModTS();
external inner function Boolean HasModWHM();
external inner function Boolean HasModDI();
external inner function Boolean UsePostOKButton();
external inner function Boolean HasBankImport();
external inner function Boolean HasPLIntegratedWithNL();
external inner function Boolean HasSLIntegratedWithNL();
external inner function Boolean HasIntegratedNL();
external inner function Boolean HasConsStockMoveInvoices();
external inner function Boolean TouchScreenLookBK(); //Bk BooksFix5 //##ii
external inner function Boolean HasModKY(); //Bk HAL //##ii

procedure dummy()//##ii
begin//##ii
  SetLangMode(LangLithuanian,"LIT",2);//##ii
  return;//##ii
end;//##ii
//##ii

window CUDClass:14
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,h5,l,v,vm,vm2,vs;
  string 255 label;
  record CUVc CUr;
  Integer wn,tilenr;
  record ModuleBlock Modb;
  
  BlockLoad(Modb);
  WindowBegin("Kontaktas",CUDClass,CGview,-);
  DynamicWindow;
  SetWRect(20,80,800,441);
  Sizeable(-1,-1,0,0);
  UseView(CUVc);
  FormName(PrintCUD);
  
  wn = CurWindow;
  if (wn>0) then begin
    if (GetWindowClass(wn)=="CUDClass") then begin 
    GetWindowRecord(wn,CUr);
    end;
  end;
  
  if (HasLocalization("EST,GBR,LVA")) then begin
  ActiveFieldOnNew("Code"); //dont change, otherwise automatic address lookup helper window wont show automatically //wns
                              // this should not be based on localization, but rather on if the
                              // address lookup is enabled, erik
  end else begin
    ActiveFieldOnNew("Name");
  end;
  if (HasMetroTestFeatures or GUIType!=kGUIMetro) then begin
    CommunicateButton;
  end;
  if (HasJewelleryInterface) then begin
    Tile(0,155,false,"",Code);
  end else begin
    Tile(0,95,false,"",Code);
  end;
  v = 6; h = 130; l=223; vs = 20; h1=410; h2 = 350; h3 = 430; h4 = 580; h5 = 460;
  EditField(h,v ,   95,"Nr.",Normal,Code,false,TSerSClass);
  EditField(h1,v,50,"Pirkėjo kategorija",Normal,CustCat,false,CCatSClass);
  EditField(h,v+=vs,95,"Trumpas pavad.",Normal,SearchKey,false,0);
  EditField(h1,v,50,"Tiekėjo kategorija",Normal,VECat,false,VGSClass);
  if (HasJewelleryInterface) then begin
    EditField(h,v+=vs,95,"Antraštė",Normal,Salutation1,false,0); 
    EditField(h1,v,50,"Priesaga",Normal,ANACode,false,0); 
    EditField(h,v+=vs,h1-h+50,"Vardas",Normal,Salutation2,false,0); 
    EditField(h,v+=vs,h1-h+50,"Pavardė",Normal,Salutation3,false,0); 
  EditField(h,v+=vs,h1-h+50,"Pavadinimas",Normal,Name,false,0);
  end else begin
    EditField(h,v+=vs,h1-h+50,"Pavadinimas",Normal,Name,false,0); 
  end;
  CheckBox(h1+80,v=6,0,"Pirkėjas",CUType);
  CheckBox(h1+80,v+=16,0,"Tiekėjas",VEType);
  if (HasModHotel) then begin
  CheckBox(h1+80,v+=16,0,"Svečias",GuestType);
  end;
  if (HasJewelleryInterface) then begin
    CheckBox(h1+80,v+=16,0,"No Mass Letters",NoLetterPosting);
    CheckBox(h1+80,v+=16,0,"No Mass Emailing",NoMailPosting);
    EditField(h1+120,v+=20,100,"Salesman",Normal,SalesMan,false,UserSClass);
  end;
  v=6;
  if (HasModHRM) then begin
    CheckBox(h1+180,v,0,"Darbuotojas",EmployeeType); v = v + 16;
  end;
  if (StandardHansa==false) then begin
    CheckBox(h1+180,v,0,"Pardavėjas",DealerType);
  end;
  CheckBox(h1+180,v+=16,0,"Vadovas",LeadType);
//  HalPushButton(h1+170,v=10,h1+170+100,v+20,"CreditInfoCUDsm","Kredito informacija");
  CheckBox(h1+280,v=6,0,"Skyrius",BranchType);

//  HalPushButton(h1+170,v=10,h1+170+100,v+20,"CreditInfoCUDsm","");
//  HalPushButton(h1+170,v=10,h1+170+100,v+20,"UpdCustomerAddressCUDsm","Atnaujinti adresą");
  tilenr = 1;
  TileButton(tilenr,"Kontaktas"); tilenr = tilenr + 1;
  TileButton(tilenr,"Siuntimas"); tilenr = tilenr + 1; 
  TileButton(tilenr,"Sąlygos"); tilenr = tilenr + 1; 
  TileButton(tilenr,"Kainodara"); tilenr = tilenr + 1; 
  TileButton(tilenr,"Įmonė"); tilenr = tilenr + 1; 
  TileButton(tilenr,"Sąskaitos"); tilenr = tilenr + 1; 
  TileButton(tilenr,"E-Įrašai"); tilenr = tilenr + 1; 
  if (StandardHansa==false) then begin
    TileButton(tilenr,"Web"); tilenr = tilenr + 1; 
  end;
  TileButton(tilenr,"Komentaras"); tilenr = tilenr + 1; 
  if (HasModHotel) then begin
    TileButton(tilenr,"Asm. duomenys"); tilenr = tilenr + 1; 
  end;
  if (StandardHansa==false) then begin
    if (GuiType==kGuiMetro) then begin//UGLY
      TileButton(tilenr,"Kiti"); tilenr = tilenr + 1; 
    end else begin
      TileButton(tilenr,"Vartot. apibr."); tilenr = tilenr + 1; 
    end;
  end;
  TileButton(tilenr,"Pastabos"); tilenr = tilenr + 1;
  if (CUr.CUType!=0 and HasCharts) then begin
    TileButton(tilenr,"BI"); tilenr = tilenr + 1; 
  end;
  tilenr = 1;
  Tile(tilenr,290,true,tilenr,InvAddr0); tilenr = tilenr + 1;
  v=6;
  HalPushButton(h+120,v,h+120+100,v+20,"UpdCustomerAddressCUDsm","Atnaujinti adresą");
  v=v+10;
  StaticText(h,v+13,"Fakt. adresas",false);
  label = UserDefined("CUVc","InvAddr0");
  EditField(h,v+=vs,-20,label,Normal,InvAddr0,false,0);
  label = UserDefined("CUVc","InvAddr1");
  EditField(h,v+=vs,-20,label,Normal,InvAddr1,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs,-20,label,Normal,InvAddr2,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs,-20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs,-20,label,Normal,InvAddr4,false,0);
  EditField(h,v+=vs,50,"Šalis",Normal,CountryCode,false,CountrySClass);//tsp-101118
  if (HasLocalization("BRA")) then begin  
    EditField(h2-159,v,214,"",ViewOnly,InvCountryName,false,0); 
    v = v + vs;
  end;  
  EditField(h1,v,-20,"Skyrius",Normal,Department,false,0);
  EditField(h,v+=vs,150,"Telefonas",Normal,Phone,false,0);
  EditField(h1,v,-20,"Faksas",Normal,Fax,false,0);
  EditField(h,v+=vs,150,"Alt tel.",Normal,AltPhone,false,0);
  EditField(h1,v,-20,"Mobilus",Normal,Mobile,false,0);
  EditField(h,v+=vs,150,"Skype vardas",Normal,SkypeName,false,0);
  EditField(h1,v,-20,"SIP",Normal,SIPCode,false,0);
  EditField(h,v+=vs,150,"El. paštas",Normal,eMail,false,0);  
  EditField(h1,v,-20,"Praplėtimas",Normal,Extension,false,0);
  EditField(h,v+=vs,150,"Pirmin. kontaktas",Normal,Person,false,ContactSClass);
  EditField(h1,v,-20,"Web pusl.",Normal,wwwAddr,false,0);
  EditField(h,v+=vs,-20,"Klasė",Normal,Classification,false,CClassSClass);
  if (HasLocalization("CHN")) then begin 
    EditField(h,v+=vs,150,"QQ Account Number",Normal,QQName,false,0); 
    EditField(h1,v,-20,"Weibo Account Number",Normal,WeiboName,false,0); 
  end;
  RecordList2(10,v+=40,-30,-39,"ContactRelVc");
  RlColKey(4,4,"Kodas",ContactCode,false,ActCustContactCode);
  RlCol(55,55,"Pavadinimas",ContactTitle,false);
  RlColKey(105,105,"Vardas",ContactName,false,ActCustContactName);
  RlCol(235,235,"Telefonas",ContactPhone,false);
  RlCol(335,335,"Mobilus",ContactMobile,false);
  RlCol(435,435,"Pareigos",JobTitle,false);
  RlCol(535,535,"El. paštas",ContacteMail,false);
  // RlCol(-1,-1,"",Invalid,true);
  Tile(tilenr,240,false,tilenr,DelAddr0); tilenr = tilenr + 1;
  v=6;
  if (HasLocalization("GBR,LVA,EST,SWE")) then begin 
  HalPushButton(h+120,v,h+120+100,v+20,"UpdDeliveryAddressCUDsm","Atnaujinti adresą");
  end;
  v=v+12;
  StaticText(h,v+13,"Siunt. adresas",false);
  label = UserDefined("CUVc","DelAddr0");
  EditField(h,v+=vs,-20,label,Normal,DelAddr0,false,0);
  label = UserDefined("CUVc","DelAddr1");
  EditField(h,v+=vs,-20,label,Normal,DelAddr1,false,0);
  label = UserDefined("CUVc","DelAddr2");
  EditField(h,v+=vs,-20,label,Normal,DelAddr2,false,0);
  label = UserDefined("CUVc","DelAddr3");
  EditField(h,v+=vs,-20,label,Normal,DelAddr3,false,0);
  label = UserDefined("CUVc","DelAddr4");
  EditField(h,v+=vs,-20,label,Normal,DelAddr4,false,0);  
  EditField(h,v+=vs,50,"Šalis",Normal,DelCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin  
    EditField(h2-159,v,203,"",ViewOnly,DelCountryName,false,0); 
    v = v + vs;
  end;    
  EditField(h2+50,v,-20,"Užsak. komentaras",Normal,OrderComment,false,0);
  EditField(h,v+=vs,120,"Frachto nr.",Normal,FreightNr,false,0);
  EditField(h2+50,v,70,"Regionas",Normal,Region,false,RegionSClass);
  EditField(h,vm=(v+=vs),120,"Pard. siunt. sąl.",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h2+50,v,70,"Pirk. siunt. sąl.",Normal,VEShipDeal,false,ShipDealSClass);
  EditField(h,v+=vs,120,"Pard. siunt. būdas",Normal,ShipMode,false,DMSClass);
  EditField(h2+50,v,70,"Pirk. siunt. būdas",Normal,VEShipMode,false,DMSClass);
    EditField(h,v+=vs,120,"Maršrutas",Normal,Sorting,false,DelRouteSClass);
/* these fields were used for securities trading, this module doesnt exist in hansa anymore */
/* Two of these fields are used in Russia and Ukraine */
//  EditField(h,vm=(v+=vs),120,"Securities Acc.",Normal,SecAccount,false,0);
//  EditField(h,v+=vs,120,"Bank Account",Normal,BankAccount,false,0);//xx
//  EditField(h,v+=vs,120,"Account Operator",Normal,AccOperator,false,BankSClass);//xx
//##  EditField(h,v+=vs ,70, "Com. Matrix",Normal,ComCode,false,ComSClass);
  ButtonFrame(h5+30,v=vm,150,2,"Siunt. data pagal");
  RadioButton(h5+30,v,0,0,"Einamają datą",DeliveryBasedOn);
  RadioButton(h5+30,v+=16,1,0,"Planuojamą siuntimo datą",DeliveryBasedOn);
  Tile(tilenr,190,false,tilenr,PayDeal); tilenr = tilenr + 1;
  EditField(h,v=6,25,"Pard. mok. sąlyga",Normal,PayDeal,false,PDSClass);
  EditField(h,v+=vs,80,"Pard. kredito limitas",Normal,CreditLimit,true,0);
    EditField(h,v+=vs,80,"Pard. kred. lim. d. sk.",Normal,CreditLimitDays,false,0);
  EditField(h,v+=vs,80,"Jų tiek. kodas",Normal,TheirCode,false,0);
  EditField(h,v+=vs,80,"Faktūra kam",Normal,InvoiceToCode,false,CUSClass);
//  EditField(h,v+=vs,80,"",Normal,ANACode,false,0);
  EditField(h,v+=2*vs,80,"Delsp. %",Normal,IntRate,false,0);
  EditField(h,v+=vs,80,"Sukūrimo data",ViewOnly,DateCreated,false,0);
    EditField(h,v+=vs,80,"Pagr. partneris",Normal,MainPartner,false,CUSClass);
  EditField(h2,v=6,25,"Pirk. mok. sąl.",Normal,VEPayDeal,false,PDSClass);
  EditField(h2,v+=vs,80,"Pirk. kredito limitas",Normal,VECreditLimit,true,0);
    EditField(h2,v+=vs,80,"Pirk. kred. lim. d. sk.",Normal,VECreditLimitDays,false,0);
  EditField(h2,v+=vs,80,"Jų pirkėjo kodas",Normal,VECustID,false,0);
  EditField(h2,v+=vs,80,"Fakūra kam",Normal,VEInvoiceToCode,false,VESClass);
  EditField(h2,v+=vs,80,"Faktoringas",Normal,VEFactoring,false,VESClass);
  EditField(h2,v+=vs,80,"Min. užs. suma",Normal,MinOrdSum,false,0);
  EditField(h2,v+=vs,80,"Nuoroda",Normal,RefStr,false,0);
  EditField(h2,v+=vs,80,"Pakeitimo data",Normal,DateChanged,false,0);
  CheckBox(h5,v=12,0,"Uždaryta",blockedFlag);
  CheckBox(h5,v+=16,0,"Sustabdyta",OnHoldFlag);
  CheckBox(h5,v+=16,0,"Priminimai",RemndrFlag);
//  CheckBox(h5,v+=16,0,"Kolekcija",ColectionFlag);
  CheckBox(h5,v+=16,0,"Delspinigiai",InterestFlag);
  CheckBox(h5,v+=16,0,"Avansas",OnAccount);
  if (StandardHansa==false) then begin
  CheckBox(h5,v+=16,0,"Be faktoringo",NoFactoringFlag);
  CheckBox(h5,v+=16,0,"Nėra pap. mokest.",NoTax1);
  CheckBox(h5,v+=16,0,"Tik grupinis fakt.",GroupInv);
    CheckBox(h5,v+=16,0,"Sav. fakt.",SelfBilling);
  CheckBox(h4,v=12,0,"EGO Pirkėjas",EGOFlag);
  CheckBox(h4,v+=16,0,"EDI Pirkėjas",EDIFlag);
  CheckBox(h4,v+=16,0,"Leisti prisijungti",AllowLogin);
//  CheckBox(h4,v+=16,0,"Leisti FTP priėjimą",FTPLogin);
  CheckBox(h4,v+=16,0,"Tik fiskalinės fakt.",FiscalFlag);
  CheckBox(h4,v+=16,0,"Nesiųsti bendrų laiškų",NoLetterPosting);
  end else begin
    CheckBox(h4,v=12,0,"Be mas. laiškų",NoLetterPosting); 
  end;
  CheckBox(h4,v+=16,0,"Nesiųsti bendrų el. laiš.",NoMailPosting);
  CheckBox(h4,v+=16,0,"Nesk. apl. aps. mok.",NoRepa);
  if (HasLocalization("GBR,LTU,POL")) then begin
    CheckBox(h4,v+=16,0,"Reversinis PVM",RvrsVAT);
  end;
  if (HasExtTax) then begin
  CheckBox(h4,v+=16,0,"Nėra regiono mok.",NoTax2);
  end;
  if (HasLocalization("SWE")) then begin 
  CheckBox(h4,v+=16,0,"F-Tax (Sweden)",FTax); 
  end;
  Tile(tilenr,110,false,tilenr,PLCode); tilenr = tilenr + 1;
  EditField(h,v=6,  80,"Pardavimo valiuta",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+=vs ,80,"Kainoraštis",Normal,PLCode,false,PLDefSClass);
    EditField(h,v+=vs ,80, "Nuolaidų lentelė",Normal,RebCode,false,RebSClass);
  if (HasSalesman or HasSalesmanBonus) then begin
  EditField(h,v+=vs,80,"Pardavėjas",Normal,SalesMan,false,UserSClass);
  end;
  EditField(h,v+=vs,80,"Pagr. prekės",Normal,CompItemCode,false,CompItemSClass);
  EditField(h2,v=6,80,"Pirk. valiuta",Normal,VECurncyCode,false,CurncyCodeSClass);
  EditField(h2,v+=2*vs ,80, "Tiek. nuolaidų lentelė",Normal,VERebCode,false,RebSClass);
  if (HasSalesGroup) then begin
  	EditField(h2,v+=vs,80,"Pard. grupė",Normal,SalesGroup,false,SalesGroupSClass);
  end;
  ButtonFrame(h5,v=24,150,3,"Kaina nustatoma pagal");
  RadioButton(h5,v,0,0,"Užsak. data",PriceBasedOn);
  RadioButton(h5,v+=16,1,0,"Plan. siunt. data",PriceBasedOn);
  RadioButton(h5,v+=16,2,0,"Siunt. data",PriceBasedOn);
  Tile(tilenr,180,false,tilenr,Comment); tilenr = tilenr + 1;
  EditField(h,v=6,-20,"Komentaras",Normal,Comment,false,0);
  EditField(h,v+=vs,-20,"Perspėjimas pard.",Normal,WarnText1,false,0);
  EditField(h,v+=vs,-20,"Perspėjimas perkant",Normal,VEWarnText1,false,0);
  EditField(h,v+=vs,120,"#PVM Reg. Nr.#",Normal,VATNr,false,0); 
  EditField(h2-20,v,120,"Įmonės kd.",Normal,RegNr1,false,0);
  ButtonFrame(h5+30,v+18,143,1,"Tipas"); 
  RadioButton(h5+30,v+18,0,0,"Įmonė",CustType); 
  RadioButton(h5+110,v+18,1,0,"Asmuo",CustType); 
  v = v + vs;
  EditField(h,v,120,"Šalies PVM Reg. Nr.",Normal,CountryVATNr,false,0);
  EditField(h2-20,v,120,"#Reg. Nr. 2#",Normal,RegNr2,false,RegDefSClass); 
  EditField(h,v+=vs,120,"#PVM Nr.# Patikr. data",Normal,VATNrCheckDate,false,PasteCurDate); 
  EditField(h2-20,v,120,"GLN",Normal,RecipientGLN,false,0); 
  if (HasLocalization("HRV,SVN")) then begin 
    EditField(h,v+=vs,120,"Legal Form",Normal,LegalForm,false,CULegalFormSClass);
  end;
  EditField(h,v+=vs,20,"Pardavimo PVM kd.",Normal,VATCode,false,VATCodeSClass);
  if (HasTaxMatrix) then begin
    EditField(h+135,v,50,"Pard. mok. šabl.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
  end;
  HalPushButton(h2-10,v,h2-10+100,v+20,"UpdCustomerAddressCUDsm","UpdCustomerAddressCUDsm");
  EditField(h,v+=vs,20,"Pirkimo PVM kd.",Normal,VEVATCode,false,VATCodeSClass);
  if (HasTaxMatrix) then begin
    EditField(h+135,v,50,"Pirk. mok. šabl.",Normal,VETaxTemplateCode,false,TaxTemplateSClass);
  end;
  EditField(h,v+=vs,50,"Kalba",Normal,LangCode,false,LangSClass); 
  if (HasLocalization("ARG")) then begin
    ButtonFrame(h+125,v+=20,177,4,"Tax Condition ");
    RadioButton(h+125,v,2,0,"Unscripted",TaxCondition);
    RadioButton(h+125,v+=16,0,0,"Local",TaxCondition);
    RadioButton(h+125,v+=16,1,0,"Multilateral Agreement",TaxCondition);
    RadioButton(h+125,v+=16,3,0,"Palengvintas mokesčių režimas",TaxCondition);
  end;  
  if (HasLocalization("BRA")) then begin 
    EditField(h,v+=vs,120,"SUFRAMA Reg. No.",Normal,SuframaRegNr,false,0); 
  end;
//  EditField(h,v+=vs,120,"Kanalas",Normal,WebServiceChannel,false,SetSClass);
  v = 130;
  v = VATZoneButtonsLabelslit(h5+30,v,170,16);
  Tile(tilenr,130,false,tilenr,AccAP); tilenr = tilenr + 1;
  EditField(h,v=6,80,"Kred. sąsk.",Normal,AccAP,false,AccSClass);
  EditField(h,v+=vs,80,"Savik. sąsk",Normal,AccCost,false,AccSClass);
  EditField(h,v+=vs,80,"Kred. avans. sąsk.",Normal,OnAccAccAP,false,AccSClass);
  EditField(h,v+=vs,120,"Pard. objektai",Normal,Objects,false,ObjSClass);
  EditField(h,v+=vs,120,"Pirk. objektai",Normal,VEObjects,false,ObjSClass); 
  EditField(h,v+=vs,50,"Mokėjimo kd.",Normal,PaymentCode,false,PaymentCodeSClass); 
  if (HasLocalization("HRV,HUN,POL,SRB,SLV,SVN")) then begin
		ButtonFrame(h,v+=40,150,3,"Įplaukos PVM"); 
		RadioButton(h,v,0,0,"Pagal nut.",IPBookVAT); 
		RadioButton(h,v+=16,1,0,"Skaič. PVM",IPBookVAT); 
		RadioButton(h,v+=16,2,0,"Neskaič. PVM",IPBookVAT); 
  end;
  EditField(h1,v=6,200,"IBAN kodas",Normal,IBANCode,false,0);
  EditField(h1,v+=vs,-20,"Sąsk. operatorius",Normal,AccOperator,false,BankSClass);
  EditField(h1,v+=vs,-20,"Banko sąsk.",Normal,BankAccount,false,0);
  EditField(h1,v+=vs,-20,"Banko sąsk. 2",Normal,Bank,false,0);
  EditField(h1,v+=vs,80,"Rūšiav. kd.",Normal,SortCode,false,0);
  if (HasWithholdingTax) then begin
  EditField(h1,v+=vs,120,"Pelno mokesčio mok. būdas",Normal,WithPayMode,false,PMSClass);
  end;
  if (HasLocalization("HRV,HUN,POL,SRB,SLV,SVN")) then begin
    ButtonFrame(h1,v+=60,150,3,"Post Payment #VAT#");
    RadioButton(h1,v,0,0,"Default",OPBookVAT);
    RadioButton(h1,v+=16,1,0,"Post #VAT#",OPBookVAT);
    RadioButton(h1,v+=16,2,0,"Do not post #VAT#",OPBookVAT);
  end;  
  Tile(tilenr,170,false,tilenr,ANACode); tilenr = tilenr + 1;
  StaticText(h,v=20,"E-faktūros",true);
//  if (HasLocalization("EST")==false) then begin //Bk+ //##ii
    EditField(h,vm=(v+=10),80,"Alguskp.",Normal,ANACode,false,0);//##ii
//  end; //Bk+ //##ii
//  EditField(h,v+=vs,80,"Alt. E-arvete konto",Normal,eInvAlternativeAccount,false,0);//##cc  //SK 180117
//  EditField(h,v+=vs,80,"Alt. E-Invoice Account",Normal,eInvAlternativeAccount,false,0); //##cc  //SK 180117
  
  ButtonFrame(h,v+=32,183,1,"Vastuvõtu eelistus"); //Bk //##cc
  RadioButton(h,v,kEInvoiceRcvPreferenceDefault,0,"Vaikimisi",eInvRcvPref);
  RadioButton(h,v+=16,3,0,"Eelistus teenuse portaalist",eInvRcvPref); //Bk //##cc
  RadioButton(h,v+=16,kEInvoiceRcvPreferenceElectronic,0,"E-arve portaali",eInvRcvPref);//##ii
  if (HasLocalization("FIN,NOR,SWE")) then begin
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceEMail,0,"E-mail",eInvRcvPref); //!!TRANSLATE
  end else begin
    RadioButton(h,v+=16,kEInvoiceRcvPreferencePaper,0,"Paberarved",eInvRcvPref); 
  end;  
  //Bk start   //##ii
//  if (HasLocalization("EST")) then begin //##ii
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceEMail,0,"E-mail",eInvRcvPref); //##ii
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceInternetBank,0,"Interneti pank",eInvRcvPref);  //##ii
//  end; //##ii
  if (Modb.InterCompany) then begin
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceInternal,0,"Sisene ettevõte",eInvRcvPref);
    EditField(h+130,v,30,"",Normal,eInvRcvToCompanyCode,false,Companies2SClass);
  end;
  RadioButton(h,v+=16,kEInvoiceRcvPreferenceNone,0,"Ei saada e-arveid",eInvRcvPref); 
  EndFrame;
  //if (HasLocalization("EST")) then begin
    h = h + 250; v = 12; //##ii
    ButtonFrame(h,v+=40,143,1,"Alternatiivne kanal"); 
    RadioButton(h,v,kEInvoiceRcvPreferenceDefault,0,"Pole kasutusel",eInvAltRcvPref); 
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceElectronic,0,"E-arve portaali",eInvAltRcvPref);
    RadioButton(h,v+=16,kEInvoiceRcvPreferencePaper,0,"Paberarve",eInvAltRcvPref);
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceEMail,0,"E-mail",eInvAltRcvPref);
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceInternetBank,0,"Interneti pank",eInvAltRcvPref); 
    EndFrame;
    h = 130; //##ii
    CheckBox(h,v+=60,0,"E-arve pdf failiga",eInvAttachPDF); //##ii
    CheckBox(h,v+=16,0,"Ära saada e-arveid",eInvStop);  //##ii
    CheckBox(h,v+=16,0,"E-arve lühiformaadis",eInvShortNote); //##ii //SK
 // end;
  vm2 = v;
  
  if (HasLocalization("EST") == false) then begin //Bk+ //##ii
  CheckBox(h1,v=vm,0,"Ära saada e-arveid",eInvStop);
  if (HasLocalization("FIN")==false) then begin
    CheckBox(h1,v+=16,0,"E-arve pdf failiga",eInvAttachPDF);
    ButtonFrame(h1,v+=44,143,3,"Paberarve postikulu"); 
  end else begin
    ButtonFrame(h1,v+=60,143,3,"Paberarve postikulu"); 
  end;
  RadioButton(h1,v,2,0,"Vaikimisi",eInvPostage);
  RadioButton(h1,v+=16,0,0,"Prioriteet",eInvPostage);
  RadioButton(h1,v+=16,1,0,"Tavaline",eInvPostage);
 // if (HasLocalization("EST")) then begin //##cc
    CheckBox(h1,v+=84,0,"E-arve lühiformaadis",eInvShortNote); //##cc
//  end; //##cc
  StaticText(h,v=(vm2+40),"E-ostutellimused",true);
  ButtonFrame(h,v+=20,163,3,"Vastuvõtu eelistus"); 
  RadioButton(h,v,kPORcvPreferenceNone,0,"Keel",ePORcvPref);
  RadioButton(h,v+=16,kPORcvPreferenceDefault,0,"Vaikimisi",ePORcvPref);
  if (Modb.InterCompany) then begin
    RadioButton(h,v+=16,kPORcvPreferenceInternal,0,"Sisene ettevõte",ePORcvPref);
    EditField(h+130,v,30,"",Normal,ePORcvToCompanyCode,false,Companies2SClass);
  end;
  EndFrame;
  end;  //Bk+ //##ii
  if (StandardHansa==false) then begin
    Tile(tilenr,70,false,tilenr,WebConf); tilenr = tilenr + 1;
  EditField(h,vm=(v=6),120,"Tinklo konferenc.",Normal,WebConf,true,0);
  EditField(h1,v,150,"Pagrindinė klasė",Normal,MainDispGroup,false,WebNGProductCatSClass);
  EditField(h,v+=vs,120,"Pradinis tinklapis",Normal,WebStartPage,false,0);
  EditField(h1,v,150,"Atvaizduoti tinkle",Normal,WebDisplays,false,WebDisplaySClass);
  EditField(h,v+=vs,120,"Frachto kodas",Normal,FreightCode,false,WebFreightSClass);
    EditField(h1,v,150,"Intern. objekto tipas",Normal,WebOTCode,false,OTSClass);
  end;
  Tile(tilenr,170,false,tilenr,Comment0); tilenr = tilenr + 1;
  EditField(h,v=6,-20,"Komentaras",Normal,Comment0,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment1,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment2,false,0);
  EditField(h,v+=vs,-20,"Titulas",Normal,Title,false,CourtesyTitlesSClass);
  EditField(h,v+=vs,-20,"Pareigos",Normal,JobDesc,false,JobTitleSClass);
  EditField(h,v+=vs,-20,"Pasveikinimas 1",Normal,Salutation1,false,0);
  EditField(h,v+=vs,-20,"Pasveikinimas 2",Normal,Salutation2,false,0);
  EditField(h,v+=vs,-20,"Pasveikinimas 3",Normal,Salutation3,false,0);
  if (HasModHotel) then begin
    Tile(tilenr,250,false,tilenr,DocType); tilenr = tilenr + 1;
  EditField(h,v=6,100,"Dok. tipas",Normal,DocType,false,CUDocTypeSClass);
  EditField(h2,v,-20,"Paso nr.",Normal,PassportNr,false,0);
  EditField(h2,v+=vs,-20,"Vardas dokumente",Normal,NameinDocument,false,0);
  //  EditFieldTL(h,vm=(v+=20),100,"Nationality",M4StrSet,Normal,423,Nationality,false,StrSetSClass);
  EditField(h,vm=(v+=20),100,"Tautybė",Normal,Nationality,false,CountrySClass);
  EditField(h,v+=20,100,"Gimtadienis",Normal,BirthDate,false,PasteCurDate);
  EditField(h,v+=20,100,"Gimimo vieta",Normal,BirthPlace,false,0); 
  EditField(h,v+=20,100,"Gimimo šalis",Normal,BirthCountry,false,CountrySClass); 
  EditField(h,v+=20,100,"Profesija",Normal,Profesion,false,0);
  EditField(h,v+=20,100,"Laikraščiai",Normal,Newspaper,false,NewspaperSClass);
  EditField(h,v+=20,100,"Slaptažodis",Normal,Passphrase,false,0);
  EditField(h,v+=vs,100,"Kelionių agent.",Normal,TourOperator,false,CUSClass);
  EditField(h,v+=vs,100,"Agentas",Normal,Agent,false,CUSClass);
  EditField(h,v+=vs,100,"Mok.būdas",Normal,DefGuestPayMode,false,PMSClass);
  EditField(h,v+=vs,100,"Užsakovas",Normal,BookOrigin,false,BookOrgSClass);
  EditField(h,v+=vs,300,"Dietos pastabos",Normal,DietRemarks,false,0);
  EditField(h,v+=vs,300,"Privalomos pastabos",Normal,RequirementRemarks,false,0);

  ButtonFrame(h2,v=vm+20,100,2,"Lytis");
  RadioButton(h2,v,0,0,"Vyras",Gender);
  RadioButton(h2,v+=17,1,0,"Moteris",Gender);

  CheckBox(h2+130,v=vm+20,0,"Rūko",Smoking);
  CheckBox(h2+130,v+=17,0,"Juodame sąraše",Blacklist);

  ButtonFrame(h2,vm=(v+=40),100,4,"Vedybinė padėtis");
  RadioButton(h2,v,0,0,"Nevedęs/Netek.",MarStatus);
  RadioButton(h2,v+=17,1,0,"Vedęs/Ištekėjusi",MarStatus);
  RadioButton(h2,v+=17,2,0,"Išsiskyręs/-usi",MarStatus);
  RadioButton(h2,v+=17,3,0,"Našlys/-ė",MarStatus);

  ButtonFrame(h2=h2+130,v=vm,100,3,"Amžius");
  RadioButton(h2,v,1,0,"Vaikas",AgeStatus);
  RadioButton(h2,v+=17,0,0,"Suaugęs",AgeStatus);
  RadioButton(h2,v+=17,2,0,"Pensininkas",AgeStatus);
  end;

  if (StandardHansa==false) then begin
    Tile(tilenr,270,false,tilenr,UserStr1); tilenr = tilenr + 1;
  v=6;h=180;
  label = UserDefined("CUVc","UserStr1");
  if (nonblank(label)) then begin
    EditField(h,v,-20,label,Normal,UserStr1,false,0);
  end;
  label = UserDefined("CUVc","UserStr2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserStr2,false,0);
  end;
  label = UserDefined("CUVc","UserStr3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserStr3,false,0);
  end;
  label = UserDefined("CUVc","UserStr4");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserStr4,false,0);
  end;
  label = UserDefined("CUVc","UserStr5");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserStr5,false,0);
  end;
  label = UserDefined("CUVc","UserVal1");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserVal1,false,0);
  end;
  label = UserDefined("CUVc","UserVal2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserVal2,false,0);
  end;
  label = UserDefined("CUVc","UserVal3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-20,label,Normal,UserVal3,false,0);
  end;
  label = UserDefined("CUVc","UserDate1");
  if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate1,false,PasteCurDate);
  end;
  label = UserDefined("CUVc","UserDate2");
  if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate2,false,PasteCurDate);
  end;
  label = UserDefined("CUVc","UserDate3");
  if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate3,false,PasteCurDate);
  end;

  EditField(h,v+=vs,-20,"Adresų kn.",Normal,AddressBooks,false,0);
  end;
  
  Tile(tilenr,500,false,tilenr,Math2); tilenr = tilenr + 1;
  CheckBox(50,v=6,0,"HTML",HtmlFlag);
  StaticText(50,v+=30,"Žinutė",true);
  TextField(60,v-5,-20,370,Math2,0);
  if (CUr.CUType!=0 and HasCharts) then begin
    Tile(tilenr,400,false,tilenr,-); tilenr = tilenr + 1;
    ChartArea(10,6,-10,390,"$CUDCLass_BIChart");
  end;

  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    if (UserCanReport("CustPSRn","",true)) then begin 
      SpecialMenu("Pirkėjo būklė",'e',0,"CUStatusCUDsm"); 
    end;
    if (UserCanReport("VEPSRn","",true)) then begin 
      SpecialMenu("Tiekėjo būklė",'u',4,"VEStatusVEDsm"); 
    end;
    SpecialMenu("Prijungti esamą kontraktą",' ',1,"AddContactCUDsm"); 
    SpecialMenu("Sukurti naują kontaktą",' ',1,"NewContactCUDsm"); 
    SpecialMenu("Sukurti veiklą",'c',2,"NewActCUDsm"); 
  end else begin
  if (UserCanReport("CustPSRn","",true)) then begin 
  SpecialMenu("Pirkėjo būklė",'e',0,"CUStatusCUDsm");
  end;
  if (UserCanReport("VEPSRn","",true)) then begin
    SpecialMenu("Tiekėjo būklė",'u',4,"VEStatusVEDsm");
  end;
    SpecialMenu("Prijungti esamą kontaktą",' ',1,"AddContactCUDsm");
    SpecialMenu("Ištrinti prijungtą kontaktą",' ',1,"DelContactCUDsm");
    SpecialMenu("Redaguoti prijungto kontakto duomenis",' ',1,"EditContactCUDsm");
  SpecialMenu("Atnaujinti kontaktinius asmenis",' ',6,"UpdContactAddrCUDsm");
    if (HasLocalization("ARG")) then begin
      SpecialMenu("Atidaryti regionines rinkliavas",' ',1,"RPCUTaxDsm");
    end;
    if (HasLocalization("ARG,BRA,ITA,KEN,MEX,PRT,SGP,ZAF")) then begin
      SpecialMenu("Atidaryti sulaikytus tiekėjus",' ',1,"WHVEDsm");
    end; //EMZ
  if (GuiType==kGuiCocoa) then begin
    SpecialMenu("Kopijuoti į lokalią adresų knygelę",' ',7,"CopyToLocalAddressBookDsm");
  end;
  if (GuiType==kGuiiPhone) then begin
    SpecialMenu("Pakeisti slaptažodį",' ',1,"ChangePasswdCUDsm");
  end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
//    SpecialMenu("Activity",'c',2,"NewActCUDsm");
    SpecialMenu("Kontaktas",' ',1,"NewContactCUDsm");
    if (StandardHansa==false) then begin
      SpecialMenu("El. paštas",'m',5,"NewMailCUDsm");
    end;
    SpecialMenu("Objektas",' ',1,"CreateObjectCUDsm");
    SpecialMenu("Prarasto slaptaž. gavimo el.paštas",' ',3,"RandomPassMailCUDsm");
  end;
  EndWindow;
end;
