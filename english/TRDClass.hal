external inner function Boolean DisplayAdditionalFields();
remote inner function Integer MailAcceptanceStatus(LongInt);
external inner function Boolean IsMoveToCloud(record SetupStatusBlock);
external inner function Boolean IsMoveToCloudB();
external inner function Boolean IsCloudControllerClient();
external inner function string 255 GetCurrentStoreName();
external inner function Boolean CompaniesInClientMode();
external inner function Boolean ProductInDemoMode();
remote inner function string 255 GetCompanyShortCode(string);
external inner function Boolean AnyModuleAvailable();
external inner function Boolean AcceptanceStatusColumnTest(string);
external inner function Integer FlipCharCode(Integer,Integer);
external inner procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external inner function boolean AddBicToMasterWindow(integer,var real,var real,real,real,real,real);
external inner function Boolean IsIntEnabActive(var string,var string,var Boolean,var string);
external inner function Boolean TouchScreenLookVertical();
external inner procedure SysEClass_Tool(Integer,var real,var real);
external inner procedure GTransEClass_Tool(Integer,var real,var real);
external inner procedure GTrans2EClass_Tool(Integer,var real,var real,var real);
external inner procedure GBaseEClass_Tool(Integer,var real,var real);
external inner procedure TransGenVClass_Tool(Integer,var real,var real);
external inner procedure GetCurUser(var record UserVc);
external inner procedure JobRClass_ENG();
external inner function string 60 UserDefined(string,string);
external inner procedure ItemStatusUserSettings(string,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean);
external inner function Boolean AllowedInCountry(integer);
external inner function Integer ResourceWindowResourceType();
external inner function Boolean ResPlan_Rental();
external inner function Boolean ResPlan_ProdOperations();
remote inner function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc,var Integer);
external inner function Boolean TouchScreenLook();
external inner procedure ExtractObj(string,var Integer,var string);
external inner function Boolean IsSessionOpen(string,string,Date,Time);
external inner procedure CntNPTSPaymentCurrencies(var Array string,var Array string,var Array Integer,var Array string,var Integer);
remote inner procedure CntPOSCurrencies(var Array string,var Array Boolean,var Integer);
external inner function Boolean CheckOffLineRecords(Boolean);
external inner function string 60 TileUserDefined(string,Integer,var Integer);
external inner function Boolean CUVATNrColumn;
external inner function Integer GetInternetEnablerCountry();
external inner function Integer CntVarietyCode(Integer,var Array string);
external inner function Integer VarietyMatMax(Integer);
external inner function Boolean UseTaxTemplatesforTaxCalc();
remote inner procedure TablesViewWClassDo(record LocalMachineBlock,string,Array string,Array string,Array string,Array string,Array Integer,var Integer,var LongInt);
external inner function string 20 GetMenuCode(string);
external inner procedure DrawModifierButtons(var Integer);
remote inner procedure ForkLiftQueueArray(string,string,var Array string,var Array string,var Array string,var Array string,var Array val,var Array Integer,var Array string,var Integer,Boolean,LongInt,LongInt,string);

external inner function Boolean DisplayLoginButtons();
external inner function Integer LoginShortcutsLines(Integer);
external inner function Integer LoginShortcutsPos(Real,Integer);

external inner procedure DefineTTRRowTypes(Integer);
external inner function real ItemButtons(string,Integer);
external inner procedure HWStoreWClassAddProducts(Integer);
external inner function Boolean HasCharts();
external inner function Boolean HasNewRegistration();
external inner function Boolean ActivityIsForAcceptanceOrFYI(record ActVc,Boolean,Boolean);
// TravelLog
external inner function Integer LoginShortcuts();
external inner function Boolean TestConfigurationEnabler(string);
remote inner function Integer CustomerSalesPaymentTermType(string);
// POS Standalone
external inner function Boolean DefCustCodeSetup();
// in-apps
external inner function Boolean HasInAppsAvailable();
external inner function Integer CountCountries();

// Language functions ENG
external inner function Boolean DisplayLoginKeyPad_ENG();
external inner function string 255 VATZoneEditFieldLabelENG(Integer);
external inner function real VATZoneButtonsLabelsENG(real,real,real,real);
external inner procedure LoginButtons2_ENG(Real,Real);
external inner procedure FORMDEF_ENG();
external inner function string 255 DemoMsgWClassTitle_ENG(Boolean,Boolean);
external inner procedure TBEClassDef_ENG();
external inner function string 255 VATZoneNameENG();
external inner procedure TSERW_ENG();
external inner procedure TSERWNT_ENG();
external inner procedure TSERWTouch_ENG();
external inner procedure TSERWTEST_ENG();
external inner procedure INVFORM_ENG(Boolean);
external inner procedure DisplayRecordDetails_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_ENG(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_ENG();
external inner function string 255 ResMonWClassWindowTitle_ENG();
external inner function string 255 RTMonWClassWindowTitle_ENG();
external inner procedure SetupNightAuditWindowControls_ENG(Boolean);
external inner procedure CURClassDefinitionENG();
external inner function real DrawPaymentModesButtons_IV_ENG(real);
external inner function real FunctionButtons_ENG(string);
external inner procedure CreditCardWindowHeader_ENG(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_ENG(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_ENG(Real);
external inner procedure CreditCardWindowDeliveryDetail_ENG(Real);
external inner function real DrawPaymentModesButtons_ENG();
external inner procedure DrawBarMenuTiles_ENG(string);
external inner procedure DrawRestPMOtherPay_ENG();
external inner procedure DisplayRecordDetailsRA_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_ENG(var integer,var integer);
external inner procedure OKCancel_ENG();
external inner procedure DefineElearningURLCacheLClass_ENG();
external inner procedure DefineElearningURLCacheDClass_ENG();
external inner function real TravelLogDeductions_ENG(real,real);
external inner procedure LoginButtons_ENG(Real);
external inner procedure FORMDEF2_ENG();
external inner procedure FORMDEF3_ENG();
external inner procedure ARS2RClass_ENG();
external inner procedure ALLVATRClass_ENG();

external inner function Boolean IsStandardUnused();
external inner function Boolean IsEnterprise();
external inner function Boolean StandardHansa();
external inner function Boolean HasATOL();

external inner function Boolean HasAccPeriods();
external inner function Boolean HasAccessGroups();
external inner function Boolean HasAddFee();
external inner function Boolean HasApprovals();
external inner function Boolean HasCCPayments();
external inner function Boolean HasAdvancedAccounting();
external inner function Boolean HasAdvancedCRM();
external inner function Boolean HasAdvancedPricing();
external inner function Boolean HasAdvancedProduction();
external inner function Boolean HasAdvancedStock();
external inner function Boolean HasAged();
external inner function Boolean HasBar();
external inner function Boolean HasBase2();
external inner function Boolean HasBranch();
external inner function Boolean HasBuyBack();
external inner function Boolean HasCategories();
//external inner function Boolean HasConsigmentStock();
external inner function Boolean HasCommunicator();
external inner function Boolean HasConsignmentStock();
external inner function Boolean HasContactClassification();
external inner function Boolean HasContactRelations();
external inner function Boolean HasConsolidation();
external inner function Boolean HasCountryPerCustomer();
external inner function Boolean HasCreditLimit();
external inner function Boolean HasCustItem();
external inner function Boolean HasCustomerSearchKey();
external inner function Boolean HasDownpayments();
external inner function Boolean HasDefineColumns();
external inner function Boolean HasDeliveryAddress();
external inner function Boolean HasDepartments();
external inner function Boolean HasETaxDocuments();
external inner function Boolean HasEInvoicing();
external inner function Boolean HasEndorsedChecks();
external inner function Boolean HasExtraNLComment();
external inner function Boolean HasExtTax();
external inner function Boolean HasFavouriteActTypes();
external inner function Boolean HasFiscalPrinter();
external inner function Boolean HasFormEditor();
external inner function Boolean HasFreightAdvanced();
external inner function Boolean HasHideCostPrice();
external inner function Boolean HasHotelInterface();
external inner function Boolean HasGuestUserDefined();
external inner function Boolean HasJewelleryInterface();
external inner function Boolean HasIncomeAndExpenseBook();
external inner function Boolean HasIOUChecks();
external inner function Boolean HasItemClassification();
external inner function Boolean HasItemGroups();
external inner function Boolean HasKPIs();
external inner function Boolean HasLanguages();
external inner function Boolean HasLimitedAccess();
external inner function Boolean HasLocalMachines();
external inner function Boolean HasLoyaltyCards();
external inner function Boolean HasMailTags();
external inner function Boolean HasMainPartner();
external inner function Boolean HasMultiCurrency();
external inner function Boolean HasMultiLocations();
external inner function Boolean HasNLBudget();
external inner function Boolean HasNLBudgetClass();
external inner function Boolean HasObjects();
external inner function Boolean HasInvoiceOfficialSerNr();
external inner function Boolean HasOfficialSerNr();
external inner function Boolean HasOrderClasses();
external inner function Boolean HasPreferedOfficialSerNr();
external inner function Boolean HasNumberSeries();
external inner function Boolean HasPersons();
external inner function Boolean HasPocketScreen();
external inner function Boolean HasPositions();
external inner function Boolean HasPrepayments();
external inner function Boolean HasProjects();//very strange tag
external inner function Boolean HasPriceLists();
external inner function Boolean HasQualityControl();
external inner function Boolean HasReconLevel2();
external inner function Boolean HasReminderLevel();
external inner function Boolean HasRemoteBackup();
external inner function Boolean HasResourceDisplayGroups();
external inner function Boolean HasRussianPrepayment();
external inner function Boolean HasRetGoodsToSupp();
external inner function Boolean HasReturnedGoods();
external inner function Boolean HasRoute();
external inner function Boolean HasSalesman();
external inner function Boolean HasSalesmanBonus();
external inner function Boolean HasSalesGroup();
external inner function Boolean HasSecondQuantity();
external inner function Boolean HasSerialNumbers();
external inner function Boolean HasServerInCloud();
external inner function Boolean HasSettlementDiscount();
external inner function Boolean HasSimulations();
external inner function Boolean hasSimAccruals();
external inner function Boolean HasSkypeConnection();
external inner function Boolean HasSIPServerConnection();
external inner function Boolean HasStrAsSignFType();
external inner function Boolean HasTouchScreenDevice();
external inner function Boolean HasTaxMatrix();
external inner function Boolean HasTestFeatures();
external inner function Boolean HasMetroTestFeatures();
external inner function Boolean HasWorkOrders();
external inner function Boolean HasThrouLocation();
external inner function Boolean HasTouchScreenLook();
external inner function Boolean HasTREO();
external inner function Boolean HasVarieties();
external inner function Boolean HasVATZone();
external inner function Boolean HasWithholdingTax();
external inner function Boolean HasWithholdingTaxAdvanced();
external inner function Boolean HasWorkOrders();

external inner function Boolean HasStandardCRM();
external inner function Boolean HasStandardOrganizer();
external inner function Boolean HasStandardCommunicator();

external inner function Boolean HasEMail();
external inner function Boolean HasExternalEMail();

external inner function Boolean HasModAT2();
external inner function Boolean HasModBA();
external inner function Boolean HasModCheck();
external inner function Boolean HasModCL();
external inner function Boolean HasModCO();
external inner function Boolean HasModCons();
external inner function Boolean HasModCourses();
external inner function Boolean HasModCredMan();
external inner function Boolean HasModCRM();
external inner function Boolean HasModEDI();
external inner function Boolean HasModExp();
external inner function Boolean HasModHotel();
external inner function Boolean HasModHRM();
external inner function Boolean HasModIN();
external inner function Boolean HasModIntStock();
external inner function Boolean HasModNL();
external inner function Boolean HasPaymentGateway();
external inner function Boolean HasModPO();
external inner function Boolean HasModPOS();
external inner function Boolean HasModPL();
external inner function Boolean HasModPOProg();
external inner function Boolean HasModPP();
external inner function Boolean HasModProd();
external inner function Boolean HasModQT();
external inner function Boolean HasModRent();
external inner function Boolean HasModRest();
external inner function Boolean HasModRsrt();
external inner function Boolean HasModSO();
external inner function Boolean HasModSL();
external inner function Boolean HasModSVO();
external inner function Boolean HasModTS();
external inner function Boolean HasModWHM();
external inner function Boolean HasModDI();
external inner function Boolean UsePostOKButton();
external inner function Boolean HasBankImport();
external inner function Boolean HasPLIntegratedWithNL();
external inner function Boolean HasSLIntegratedWithNL();
external inner function Boolean HasIntegratedNL();
external inner function Boolean HasConsStockMoveInvoices();

window TRDClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs,ve,hpos;
  Integer f,flipnr,rownr;

  rownr = 2000; //cust
  ve = 400;
  WindowBegin("Transaction",TRDClass,CGview,-);
  if (IsStandardProduct) then begin
    if (GetFeatureState("HasModNL")==kFeatureTrial) then begin
      rownr = 10;
      ve = 360;
      AutoSizeWindow(false);
    end else begin
      Sizeable(-1,-1,0,0);
    end;
  end else begin
    Sizeable(-1,-1,0,0);
  end;
  if (HasExtraNLComment) then begin
    SetWRect(20,80,900,ve);
  end else begin
    SetWRect(20,80,740,ve);
  end;
  UseView(TRVc);
  FormName(PrintTRD);
  ActiveFieldOnNew("TransDate");
  vs = 20;
  if (HasNumberSeries) then begin
    EditField(80,v=6,80,"No.",Normal,Number,false,TSerSClass);
  end else begin
    EditField(80,v=6,80,"No.",Normal,Number,false,0);
  end;
  EditField(250,v,82,"Trans. Date",Normal,TransDate,false,PasteCurDate);
  EnterSkip(Comment);
  EditField(426,v,-40,"Reference",Normal,RefStr,false,0);
//  EditField(570,v,80,"Doc No.",Normal,SeqNr,false,0);
  EditField(80,v+=vs,-40,"Text",Normal,Comment,false,0);
//  CheckBox(450,v,0,"E_xported",Expf);
  EnterSkip(Math);
  if (HasBase2) then begin
    EditField(120,-41,88,"Difference Base 1",ViewOnly,DiffVal,true,0);
  end else begin
    EditField(120,-41,88,"Difference",ViewOnly,DiffVal,true,0);
  end;
  if (HasBase2 or HasMultiCurrency) then begin
    EditField(-250,-41,88,"Total",ViewOnly,DSum,true,0);
    EditField(-157,-41,88,"",ViewOnly,CSum,true,0);
    if (HasBase2) then begin
      EditField(120, -21,88,"Difference Base 2",ViewOnly,Diff2Val,true,0);
      EditField(-250,-21,88,"Total",ViewOnly,DSum2,true,0);
      EditField(-157,-21,88,"",ViewOnly,CSum2,true,0);
    end;
  end else begin
    EditField(-240,-41,88,"Total",ViewOnly,DSum,true,0);
    EditField(-147,-41,88,"",ViewOnly,CSum,true,0);
    if (HasBase2) then begin
      EditField(120, -21,88,"Difference Base 2",ViewOnly,Diff2Val,true,0);
      EditField(-250,-21,88,"Total",ViewOnly,DSum2,true,0);
      EditField(-157,-21,88,"",ViewOnly,CSum2,true,0);
    end;
  end;
  h=4; v=v+(vs+17);
  if (IsStandardProduct) then begin
    if (HasMultiCurrency or HasBase2 or (HasIntegratedNL and HasLocalization("PRT"))) then begin
      MatrixBegin(5,vm=v,-50,-46,-,rownr);
    end else begin
      MatrixBegin(5,vm=v,-25,-46,-,rownr);
    end;
  end else begin
    MatrixBegin(5,vm=v,-50,-46,-,rownr);
  end;
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,hpos=32,"Account",0,AccNumber,false,AccSClass); hpos = hpos + 69;
  if (HasObjects) then begin
    MatCol(1,hpos,"Tags/Objects",0,Objects,false,ObjSClass); hpos = hpos + 140;
//  MatCol(1,-400,"Short.",0,ACShort,false,ACShortSClass); // what the hell is this? Karl
    MatCol(1,hpos,"Description",0,Comment,false,0); hpos = hpos + 160; // -349    
    if (HasExtraNLComment) then begin
      MatCol(1,hpos,"Additional Description",0,ExtraComment,false,0); hpos = hpos + 130; // -349
    end;
  end else begin
//  MatCol(1,-400,"Short.",0,ACShort,false,ACShortSClass); // what the hell is this? Karl
    MatCol(1,hpos,"Description",0,Comment,false,0);  hpos = hpos + 130; // -349
    if (HasExtraNLComment) then begin
      if (HasLocalization("POL")) then begin
        MatCol(1,hpos,"Additional Description",0,ExtraComment,false,0); hpos = hpos + 100; // -349
      end else begin
        MatCol(1,hpos,"Additional Description",0,ExtraComment,false,0); hpos = hpos + 130; // -349
      end;
    end;
  end;
  if ((HasLocalization("GBR,LTU,POL") and IsEnterprise) or HasLocalization("LVA")) then begin
    if (HasMultiCurrency) then begin
      MatCol(1,-240,"Base 1 Debit",0,DebVal,true,0);
      MatCol(1,-160,"Base 1 Credit",0,CredVal,true,0);
    end else begin
      MatCol(1,-240,"Debit",0,DebVal,true,0);
      MatCol(1,-160,"Credit",0,CredVal,true,0);
    end;
    MatCol(1,-90,"#V-Cd#",0,VATCode,false,VATCodeSClass);
    MatCol(1,-45,"Rvrs",0,RvrsVATCode,false,VATCodeSClass);
  end else begin
    if (IsStandardProduct and HasLocalization("PRT")) then begin
      MatCol(1,hpos,"Type",0,SAFTType,false,SetSClass);
    end;
    if (HasMultiCurrency) then begin
      MatCol(1,-210,"Base 1 Debit",0,DebVal,true,0);
      MatCol(1,-120,"Base 1 Credit",0,CredVal,true,0);
    end else begin
      MatCol(1,-210,"Debit",0,DebVal,true,0);
      MatCol(1,-120,"Credit",0,CredVal,true,0);
    end;
    MatCol(1,-45,"#V-Cd#",0,VATCode,false,VATCodeSClass);
  end;
  MatText(2,32,"Signature",true);
  MatColTL(2,108,"",0,M4Code,ViewOnly,10,Sign,false,0);
  MatText(2,160,"Old Trans. Date",true);
  MatColTL(2,290,"",0,-1,ViewOnly,-1,OldTransDate,false,0);
  MatText(3,32,"Corrected by Transaction",true);
  MatColTL(3,215,"",0,M4AppCode,ViewOnly,0,CorrNr,false,0);
  MatText(3,315,"Reg.Date",true);
  MatCol(3,385,"",0,CorrDate,false,0);
  MatText(4,32,"Correction to Transaction",true);
  MatColTL(4,215,"",0,M4AppCode,Normal,0,CorrNr,false,0);
  if (HasBase2) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,hpos=32,"Account",0,AccNumber,false,AccSClass); hpos = hpos + 69;
    if (HasObjects) then begin
      MatCol(1,hpos,"Tags/Objects",0,Objects,false,ObjSClass); hpos = hpos + 140;
    end else begin
      MatCol(1,hpos,"Description",0,Comment,false,0); hpos = hpos + 160;
    end;
    MatCol(1,-400,"Base 1 Debit",0,DebVal,true,0);
    MatCol(1,-300,"Base 1 Credit",0,CredVal,true,0);
    MatCol(1,-200,"Base 2 Debit",0,DebVal2,true,0);
    MatCol(1,-100,"Base 2 Credit",0,CredVal2,true,0);
    MatText(2,32,"Signature",true);
    MatCol(2,108,"",0,Sign,false,0);
    MatText(2,160,"Old Trans. Date",true);
    MatColTL(2,290,"",0,-1,ViewOnly,-1,OldTransDate,false,0);
    MatText(3,32,"Corrected by Transaction",true);
    MatColTL(3,215,"",0,M4AppCode,ViewOnly,0,CorrNr,false,0);
    MatText(3,315,"Reg.Date",true);
    MatCol(3,385,"",0,CorrDate,false,0);
    MatText(4,32,"Correction to Transaction",true);
    MatColTL(4,215,"",0,M4AppCode,Normal,0,CorrNr,false,0);
  end;
  if (IsStandardProduct and HasIntegratedNL and HasLocalization("PRT")) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,32,"T",0,Typ,false,SetSClass);
    MatCol(1,52,"Ser. No.",0,SerNr,false,ARSClass);
    MatCol(1,112,"Due Date",0,DueDate,false,PasteCurDate);
    MatCol(1,184,"Company",0,CompCode,false,CUSClass);
  end;
  if (HasMultiCurrency) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,hpos=32,"Account",0,AccNumber,false,AccSClass); hpos = hpos + 69;
    if (HasObjects) then begin
      MatCol(1,hpos,"Tags/Objects",0,Objects,false,ObjSClass); hpos = hpos + 140;
    end else begin
      MatCol(1,hpos,"Description",0,Comment,false,0); hpos = hpos + 160;
    end;
    if (HasBase2) then begin
      MatCol(1,-410,"Base 1 Debit",0,DebVal,true,0);
      MatCol(1,-330,"Base 1 Credit",0,CredVal,true,0);
    end else begin
      MatCol(1,-410,"Debit",0,DebVal,true,0);
      MatCol(1,-330,"Credit",0,CredVal,true,0);
    end;
    MatCol(1,-250,"Currency",0,Curncy,false,CurncyCodeSClass);
    MatCol(1,-200,"Currency Debit",0,CurDebVal,true,0);
    MatCol(1,-100,"Currency Credit",0,CurCredVal,true,0);
    MatText(2,32,"Signature",true);
    MatCol(2,108,"",0,Sign,false,0);
    MatText(2,160,"Old Trans. Date",true);
    MatColTL(2,290,"",0,-1,ViewOnly,-1,OldTransDate,false,0);
    MatText(3,32,"Corrected by Transaction",true);
    MatColTL(3,215,"",0,M4AppCode,ViewOnly,0,CorrNr,false,0);
    MatText(3,315,"Reg. Date",true);
    MatCol(3,385,"",0,CorrDate,false,0);
    MatText(4,32,"Correction to Transaction",true);
    MatColTL(4,215,"",0,M4AppCode,Normal,0,CorrNr,false,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,hpos=32,"Account",0,AccNumber,false,AccSClass); hpos = hpos + 69;
    if (HasObjects) then begin
      MatCol(1,hpos,"Tags/Objects",0,Objects,false,ObjSClass);  hpos = hpos + 140;
    end else begin
      MatCol(1,hpos,"Description",0,Comment,false,0); hpos = hpos + 160;
    end;
    if (HasBase2) then begin
      MatCol(1,-400,"Currency",0,Curncy,false,CurncyCodeSClass);
      MatCol(1,-350,"Base Rate 1",0,BaseRate1,true,0);
      MatCol(1,-280,"Base Rate 2",0,BaseRate2,true,0);
    end else begin
      MatCol(1,-300,"Currency",0,Curncy,false,CurncyCodeSClass);
    end;
    MatCol(1,-210,"From Rate",0,FrRate,true,0);
    MatCol(1,-140,"To Rate B.1",0,ToRateB1,true,0);
    if (HasBase2) then begin
      MatCol(1,-70,"To Rate B.2",0,ToRateB2,true,0);
    end;
    MatText(2,32,"Signature",true);
    MatCol(2,108,"",0,Sign,false,0);
    MatText(2,160,"Old Trans. Date",true);
    MatColTL(2,290,"",0,-1,ViewOnly,-1,OldTransDate,false,0);
    MatText(3,32,"Corrected by Transaction",true);
    MatColTL(3,215,"",0,M4AppCode,ViewOnly,0,CorrNr,false,0);
    MatText(3,315,"Reg.Date",true);
    MatCol(3,385,"",0,CorrDate,false,0);
    MatText(4,32,"Correction to Transaction",true);
    MatColTL(4,215,"",0,M4AppCode,Normal,0,CorrNr,false,0);
  end;
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,32,"T",0,Typ,false,SetSClass);
    MatCol(1,52,"Ser. No.",0,SerNr,false,ARSClass);
    MatCol(1,112,"Due Date",0,DueDate,false,PasteCurDate);
    MatCol(1,184,"Company",0,CompCode,false,CUSClass);
    if (HasExtraNLComment) then begin
      MatCol(1,-550,"Description",0,Comment,false,0);
      MatCol(1,-410,"Additional Description",0,ExtraComment,false,0);
    end else begin
      MatCol(1,-400,"Description",0,Comment,false,0);
    end;
    MatCol(1,-290,"Account",0,AccNumber,false,AccSClass);
    MatCol(1,-210,"Debit",0,DebVal,true,0);
    MatCol(1,-120,"Credit",0,CredVal,true,0);
    MatCol(1,-45,"#V-Cd#",0,VATCode,false,VATCodeSClass);
    MatText(2,32,"Signature",true);
    MatCol(2,108,"",0,Sign,false,0);
    MatText(2,160,"Old Trans. Date",true);
    MatColTL(2,290,"",0,-1,ViewOnly,-1,OldTransDate,false,0);
    MatText(3,32,"Corrected by Transaction",true);
    MatColTL(3,215,"",0,M4AppCode,ViewOnly,0,CorrNr,false,0);
    MatText(3,315,"Reg.Date",true);
    MatCol(3,385,"",0,CorrDate,false,0);
    MatText(4,32,"Correction to Transaction",true);
    MatColTL(4,215,"",0,M4AppCode,Normal,0,CorrNr,false,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,32,"Account",0,AccNumber,false,AccSClass);
    if (HasObjects) then begin
      MatCol(1,98,"Tags/Objects",0,Objects,false,ObjSClass);
    end;
    if (HasExtraNLComment) then begin
      MatCol(1,-590,"Description",0,Comment,false,0);
      MatCol(1,-450,"Additional Description",0,ExtraComment,false,0);
    end else begin
      MatCol(1,-420,"Description",0,Comment,false,0);
    end;
    MatCol(1,-330,"Nominal",0,NomVal,true,0);
    MatCol(1,-230,"Debit",0,DebVal,true,0);
    MatCol(1,-130,"Credit",0,CredVal,true,0);
    MatCol(1,-30,"Corr",0,CorspSer,false,0);
    MatText(2,32,"Signature",true);
    MatCol(2,108,"",0,Sign,false,0);
    MatText(2,160,"Old Trans. Date",true);
    MatColTL(2,290,"",0,-1,ViewOnly,-1,OldTransDate,false,0);
    MatText(3,32,"Corrected by Transaction",true);
    MatColTL(3,215,"",0,M4AppCode,ViewOnly,0,CorrNr,false,0);
    MatText(3,315,"Reg.Date",true);
    MatCol(3,385,"",0,CorrDate,false,0);
    MatText(4,32,"Correction to Transaction",true);
    MatColTL(4,215,"",0,M4AppCode,Normal,0,CorrNr,false,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,32,"Account",0,AccNumber,false,AccSClass);
    if (HasObjects) then begin
      MatCol(1,98,"Tags/Objects",0,Objects,false,ObjSClass);
    end;
    if (HasExtraNLComment) then begin
      MatCol(1,-550,"Description",0,Comment,false,0);
      MatCol(1,-380,"Additional Description",0,ExtraComment,false,0);
    end else begin
      MatCol(1,-420,"Description",0,Comment,false,0);
    end;
    if (StandardHansa==false) then begin
      MatCol(1,-260,"Tax Account",0,TAccNumber,false,TAccSClass);
      MatCol(1,-180,"Quantity",0,Qty,true,0);
      MatCol(1,-100,"Type",0,SAFTType,false,SetSClass);
    end;
    MatText(2,32,"Signature",true);
    MatCol(2,108,"",0,Sign,false,0);
    MatText(2,160,"Old Trans. Date",true);
    MatColTL(2,290,"",0,-1,ViewOnly,-1,OldTransDate,false,0);
    MatText(3,32,"Corrected by Transaction",true);
    MatColTL(3,215,"",0,M4AppCode,ViewOnly,0,CorrNr,false,0);
    MatText(3,315,"Reg.Date",true);
    MatCol(3,385,"",0,CorrDate,false,0);
    MatText(4,32,"Correction to Transaction",true);
    MatColTL(4,215,"",0,M4AppCode,Normal,0,CorrNr,false,0);
  end;
  InsertRowTest;
  DeleteRowTest;
  EndMatrix;
  vs = 20;
  v = vm + 1;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Balance Transaction",'B',0,"BalanceTRDsm");
    SpecialMenu("Swap Debit & Credit",' ',1,"SwapDCTRDsm");
    SpecialMenu("Correction Mark",' ',3,"CorrectionMarkTRDsm");
    SpecialMenu("Open Subsystem Record",'t',6,"OpenSubsystemTRDsm");
    if (HasMultiCurrency) then begin
      SpecialMenu("Update Currency Rates",' ',7,"UpdCurRateTRDsm");
    end;
  end else begin
    SpecialMenu("Balance Transaction",'B',0,"BalanceTRDsm");
    SpecialMenu("Swap Debit & Credit",' ',1,"SwapDCTRDsm");
//    if (HasIntegratedNL) then begin
    if (true) then begin
      SpecialMenu("Update Mark",' ',2,"UpdateMarkTRDsm");
      SpecialMenu("Correction Mark",' ',3,"CorrectionMarkTRDsm");
    end;
    SpecialMenu("Calculate Field",'F',4,"CalcFieldTRDsm");
    SpecialMenu("Change Sign",' ',5,"ChangeSignTRDsm");
    if (HasIntegratedNL) then begin
      SpecialMenu("Open Subsystem Record",'t',6,"OpenSubsystemTRDsm");
    end;
    if (HasMultiCurrency) then begin
      SpecialMenu("Update Currency Rates",' ',7,"UpdCurRateTRDsm");
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    SpecialMenu("Add Account",' ',0,"AddAccountQTDsm");
  end;
  EndWindow;
end;

window MonthResRClass:1 
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm;
  WindowBegin("Set your income statement on a monthly basis",MonthResRClass,CGRcW,RcType);
  SetWRect(20,80,580,250);
  PeriodField(h=150,v=6,"Period (max.12 months)");
  if (HasObjects) then begin
  EditFieldTL(h,v+=20,150,"Object",M4UStr,Normal,60 ,ObjStr,false,ObjSClass);
  EditFieldTL(h,v+=20,50,"Object type",M4UStr,Normal,5 ,ObjType,false,OTSClass);
  end;
  vm=v;
  if (HasMultiCurrency) then begin
  EditField(h,v+=20,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  end;
  if (HasLanguages) then begin
  EditField(h,v+=20,50,"Language",Normal,Language,false,LangSClass);  
  end;
  EditFieldTL(395,6,120,"Header",M4Str,Normal,60 ,f1,false,0);
  ButtonFrame(h=395,v=vm,123,5,"Accounts");
  RadioButton(h,v,0,0,"Everything",AccSpec);
  RadioButton(h,v+=16,1,0,"Only used",AccSpec);
  if (HasAdvancedAccounting or HasLocalization("FIN")) then begin
  RadioButton(h,v+=16,2,0,"Only groups",AccSpec);
  RadioButton(h,v+=16,3,0,"groups",AccSpec);
  RadioButton(h,v+=16,4,0,"with a balance",AccSpec);
  end;
  EndFrame;
  if (HasBase2) then begin
  ButtonFrame(h=230,v=vm+30,123,2,"Values");
  RadioButton(h,v,0,0,"Curncy 1",basecurncy);
  RadioButton(h,v+=16,1,0,"Curncy 2",basecurncy);
  end;
  EndWindow;
end;

window VIJRClass:1 //UGLY, magic please
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  Boolean tilesf;
  
  WindowBegin("Specify #Purchase Invoice# Journal",VIJRClass,CGRcW,RcType);
  SetWRect(20,80,470,320);
  v = 6; vs = 20; h = 150;
  tilesf = HasContactClassification or HasObjects;
  if (tilesf) then begin
    Tile(0,20,false,"",f1);
  end;
  EditFieldTL(h,v, 150,"No.",   M4Str,Normal,30,f1,false,0); v = v + vs;
  if (tilesf) then begin
    TileButtons(v,2);
    Tile(1,280,false,"1",f2);
    v = 6;
  end;
  PeriodField(h,v,"Period");
  EditFieldTL(h,v+=vs ,75,"#Supplier#",M4UStr,Normal,20,f2,false,VESClass);
  if (HasCategories) then begin
    EditFieldTL(h,v+=vs,50,"#Supplier# Category",M4UStr,Normal,5,f9,false,VGSClass);
  end;
  if (HasContactClassification) then begin
    EditFieldTL(h,v+=vs ,150,"#Supplier# Class.",M4UStr,Normal,60,f4,false,CClassSClass);
    EditFieldTL(h,v+=vs ,70,"Classification Type",M4UStr,Normal,30,f5,false,CTypeSClass);
  end;
  if (HasApprovals) then begin
    EditFieldTL(h,v+=vs ,75,"Signer",M4UStr,Normal,10,f3,false,UserSClass);
  end;
  if (HasObjects) then begin
    EditFieldTL(h,v+=vs,250,"Tag/Object",M4UStr,Normal,60,ObjStr,false,ObjSClass);
    EditFieldTL(h,v+=vs,50,"Tag/Object Type",M4UStr,Normal,5,ObjType,false,OTSClass);
    EditFieldTL(h,v+=vs,250,"Row Tag/Object",M4UStr,Normal,60,f6,false,ObjSClass);
  end;
  if (HasModTS) then begin
    EditFieldTL(h,v+=vs,50,"Project",M4UStr,Normal,20,TransStr,false,PRSClass);
  end;
  if (HasSalesman or HasSalesmanBonus) then begin
    EditFieldTL(h,v+=vs ,100,"#Salesman#",M4UStr,Normal,10,AccStr,false,UserSClass);
  end;
  if (HasSalesGroup) then begin
    EditFieldTL(h,v+=vs ,50,"Sales Group",M4UStr,Normal,10,Stext,false,SalesGroupSClass);
  end;
  if (HasAdvancedCRM) then begin
    EditFieldTL(h,v+=vs ,50,"Min. amount",M4Val,Normal,0,vals0,false,0);
  end;
//CUST-BEGIN
  EditFieldTL(h,v+=vs ,90,"Transaction date",M4Date,Normal,0,d2,false,PasteCurDate);
//CUST-END

  if (tilesf) then begin
    Tile(2,320,false,"2",d1);
    v = 6;
  end;
  if (IsEnterprise and StandardHansa==false) then begin
    EditFieldTL(h,v,100,"Rcv. Date",M4Date,Normal,0,d1,false,PasteCurDate);
  end;
  if (HasModNL) then begin
    EditFieldTL(h=150,v+=vs,100,"Cost Account",M4UStr,Normal,21,f7,false,AccSClass);
    StaticText(h+110,v+12, "Detailed only",false);
  end;
  if (HasAdvancedAccounting) then begin
    EditFieldTL(h=150,v+=vs,100,"Creditors Account",M4UStr,Normal,21,f8,false,AccSClass);
    CheckBox(h,v+=vs,0,"Only Prel. Booked #Invoices#",flags[10]);
    CheckBox(h,v+=16,0,"Only On Hold #Invoices#",flags[11]);
  end;
  h = 30; vm=v+50; v=vm;
  if (HasModNL) then begin
    ButtonFrame(h,v,143,4,"Function");
    RadioButton(h,v,0,0,"Overview",ArtMode);
    RadioButton(h,v+=16,1,0,"Detailed",ArtMode);
    if (IsEnterprise) then begin
      RadioButton(h,v+=16,2,0,"Overview with #VAT#",ArtMode);
    end;
    if (IsEnterprise or HasLocalization("ITA")) then begin
      RadioButton(h,v+=16,3,0,"Overview per #VAT# %",ArtMode);
    end;
    EndFrame;
    h= h+168; v = vm;
  end else begin
    h = 30;
  end;
  ButtonFrame(h,v,103,2,"Status");
  CheckBox(h,v,0,"Not OKed",flags[1]);
  CheckBox(h,v+=16,1,"O_Ked",flags[2]);
  if (HasModNL) then begin
    h = h + 128; v =  vm;
  end else begin
    h = h + 157; v =  vm;
  end;
  ButtonFrame(h,v,123,3,"#Invoice# Type");
  CheckBox(h,v,0,"#Invoices#",flags[3]);
  CheckBox(h,v+=16,0,"Cash Notes",flags[4]);
  CheckBox(h,v+=16,0,"#Credit Notes#",flags[5]);

//  CheckBox(h,v+=24,0,"Show #VAT# Amount",flags[15]);
  EndWindow;
end;

window MainRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,hacc,v,vm,vm2,vs;
  Integer tilenr;

  WindowBegin("Specify #Nominal Ledger#",MainRClass,CGRcW,RcType);
  UseView(RcVc);
  if (IsEnterprise) then begin
    SetWRect(20,80,600,380);
    Tile(0,40,false,"",Period2Str);
    h = 180; h2 = 342;
  end else begin
    SetWRect(20,80,400,350);
    h = 120;
  end;
  vs = 20;
  hacc = 342;
  PeriodField(h,v=6,"Period");
  if (IsEnterprise) then begin
    EditFieldTL(h,v+=vs,150,"Loop 1",M4UStr,Normal,60,f4,false,AccSClass);
    TileButtons(v,2);
    RadioButton(h2,v,0,0,"Accounts",flags[11]);
    tilenr = 1;
    Tile(tilenr,340,false,tilenr,ObjStr); tilenr = tilenr + 1;
    v = 6;
  end else begin
    EditFieldTL(h,v+=vs,150,"Accounts",M4UStr,Normal,60,f4,false,AccSClass);
  end;
  if (HasObjects) then begin
    if (IsEnterprise) then begin
      EditFieldTL(h,v,250,"Tag/Object",M4UStr,Normal,60 ,ObjStr,false,ObjSClass);
    end else begin
      EditFieldTL(h,v+=vs,150,"Tag/Object",M4UStr,Normal,60 ,ObjStr,false,ObjSClass);
    end;
    EditFieldTL(h,v+=vs,50,"Tag/Object Type",M4UStr,Normal,5 ,ObjType,false,OTSClass);
  end;
  if (IsEnterprise) then begin
    CheckBox(350,v,0,"Including unspecified",flags[2]);
    EditFieldTL(h,v+=vs,200,"Only with Text",M4Str,Normal,30,Stext,false,0);
  end else begin
    EditFieldTL(h,v+=vs,150,"Only with Text",M4Str,Normal,30,Stext,false,0);
  end;
  if (HasModSL or HasModPOS or HasModPL or HasModRest) then begin
    EditFieldTL(h,v+=vs,50,"#VAT# Code",M4Code,Normal,10,f1,false,VATCodeSClass);
  end;
  if (HasLanguages) then begin
    EditFieldTL(h,v+=vs,50,"Language",M4UStr,Normal,5,Language,false,LangSClass);
  end;
  if (HasMultiCurrency) then begin
    EditFieldTL(h,v+=vs,50,"Currency",M4UStr,Normal,5,CurncyCode,false,CurncyCodeSClass);
  end;
  if (IsEnterprise) then begin
    EditFieldTL(h,v+=vs,30,"Recon. Code",M4UStr,Normal,5,f2,false,ReconCodeSClass);
    CheckBox(220,v,0,"Exclude with Code",flags[25]);
    if (StandardHansa==false) then begin
      EditFieldTL(h,v+=vs,250,"Reference",M4Str,Normal,60,LastAcc,false,0);
    end;
  end;
  if (HasObjects) then begin
    EditFieldTL(h,v+=vs,80,"Exclude Tag/Object",M4UStr,Normal,60,f3,false,ObjSClass);
  end;
  if (IsEnterprise) then begin
    h1 = 15; h2 = 230; h3 = 395;
  end else begin
    h1 = 30; h2 = h1; h3 = 180;
  end;
  if (IsEnterprise) then begin
    CheckBox(h1,vm=(v+=40),0,"Used Accounts only",UsedOnly);
    CheckBox(h1,v+=16,0,"Show References",flags[10]);
  end else begin
    ButtonFrame(h2,vm=(v+=40),123,2,"Sorting");
    RadioButton(h2,v,0,0,"Date and Type",flags[28]);
    RadioButton(h2,v+=16,1,0,"Order of Entry",flags[28]);
    CheckBox(h1,v+=56,0,"Used Accounts only",UsedOnly);
  end;
  CheckBox(h1,v+=16,0,"With _Corrections",flags[1]);
  CheckBox(h1,vm2=(v+=16),0,"Subtotal #VAT# Codes",flags[5]);
  if (IsEnterprise) then begin
    CheckBox(h1,v+=16,0,"Subtotal #VAT# Codes, per Account",flags[27]);
  end;
  CheckBox(h1,v+=16,0,"List Transaction No.",flags[4]); v = v + 16;
  if (IsEnterprise) then begin
    CheckBox(h1,v,0,"Don't print Transaction Prefix",flags[23]); v = v + 16;
  end;
  if (HasMultiCurrency) then begin
    CheckBox(h1,v,0,"Show Cu_rrencies",flags[8]); v = v + 16;
  end;
  if (HasBase2) then begin
    CheckBox(h1,v,0,"Corresponding _Accounts",flags[3]); v = v + 16;
    CheckBox(h1,v,0,"Show Base Currency 2 Differences only",flags[24]); v = v + 16;
  end;
//CUST-BEGIN
  CheckBox(h1,v,0,"Include Supplier Inv. No.",sflags[9]); v = v + 16;
//CUST-END
  if (IsEnterprise) then begin
    ButtonFrame(h2,v=vm,123,2,"Sorting");
    RadioButton(h2,v,0,0,"Date and Type",flags[28]);
    RadioButton(h2,v+=16,1,0,"Order of Entry",flags[28]);
  end;
  if (IsEnterprise) then begin
    CheckBox(h2,v=vm2,0,"_Balances only",ArtMode);
    CheckBox(h2,v+=16,0,"Show Tag/Object",flags[6]);
  end else begin
    CheckBox(h1,v,0,"_Balances only",ArtMode); v = v + 16;
    CheckBox(h1,v,0,"Show zeroes instead of blank strings",flags[20]); v = v + 16;
    if (HasObjects) then begin
      CheckBox(h1,v,0,"Show Tag/Object",flags[6]); v = v + 16;
    end;
    h2 = h1;
  end;
  if (HasAdvancedAccounting) then begin
    CheckBox(h2,v+=16,0,"Not Reconciled",flags[21]);
    CheckBox(h2,v+=16,0,"Reconciled",flags[22]);
  end;
  if (HasNLBudget) then begin
    CheckBox(h2,v+=16,0,"Include Budget",sflags[0]);
  end;
  ButtonFrame(h3,v=(vm),170,3,"Long Lines");
  RadioButton(h3,v,0,0,"Don't Break",flags[7]);
  RadioButton(h3,v+=16,1,0,"Break",flags[7]);
  RadioButton(h3,v+=16,2,0,"Cut",flags[7]);
  if (IsEnterprise) then begin
    ButtonFrame(h3,v+=40,170,3,"Function");
    RadioButton(h3,v,0,0,"Show all Transactions",flags[26]);
    RadioButton(h3,v+=16,1,0,"Show Trans. w/o Doc. No.",flags[26]);
    RadioButton(h3,v+=16,2,0,"Show Trans. with Doc. No.",flags[26]);
    Tile(tilenr,340,false,tilenr,f5); tilenr = tilenr + 1;
    v = 6; h2 = 330;
    EditFieldTL(h,v,140,"Loop 2",M4UStr,Normal,60,f5,false,AccSClass);
    RadioButton(hacc,v,1,0,"Accounts",flags[11]);
    EditFieldTL(h,v+=vs,140,"Loop 3",M4UStr,Normal,60,f6,false,AccSClass);
    RadioButton(hacc,v,2,0,"Accounts",flags[11]);
  end;
  if (HasSimulations and HasModNL) then begin
    h3 = 100;
    if (!IsEnterprise) then begin h3 = 180; end;
    ButtonFrame(h3,vm=(v+=45),170,4,"Include Simulations");
    RadioButton(h3,v,0,0,"None",SimVerf);
    RadioButton(h3,v+=16,1,0,"All",SimVerf);
    RadioButton(h3,v+=16,2,0,"Year End Stage 1",SimVerf);
    RadioButton(h3,v+=16,3,0,"Year End Stage 1 and 2",SimVerf);
  end;
  if (IsEnterprise) then begin
    CheckBox(h3,v+=24,0,"Show zeroes instead of blank strings",flags[20]);
  end;
  if (HasBase2) then begin
    if (IsEnterprise) then begin
      h3 = 300;
      ButtonFrame(h3,v=vm,140,2,"Values in");
    end else begin
      h3 = 180;
      ButtonFrame(h3,v+=40,170,2,"Values in");
    end;
    RadioButton(h3,v,0,0,"Base Currency 1",basecurncy);
    RadioButton(h3,v+=16,1,0,"Base Currency 2",basecurncy);
  end;
  EndWindow;
end;