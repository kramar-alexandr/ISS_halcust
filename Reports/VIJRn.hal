//81160331 /JL 201604
external inner function Boolean HasContactClassification();
external inner function Boolean HasCategories();
external inner procedure HTLevCat(string,var string);
external inner procedure HTCustClass(string,var string);
external inner function Boolean ContactInGroupClass2(string,string,string,string,string,string,string);
external inner function Boolean HasApprovals();
external inner procedure GetVATdouble(string,var val,var val,Integer);
external inner procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external inner procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external inner procedure SetupVATBase(var record SMVc,var Integer);
external inner function Integer VATType(string);
external inner procedure VICalcVals(var record VIVc);
external inner procedure VISumup(record VIVc,var val);
external inner function roundmode GetVATRoundMode(record RoundBlock);
external inner function roundmode DefaultRoundMode();
external inner procedure HT2Per(Date, Date , var string);
external inner function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external inner function val FindVAT(string,val,Integer,Integer);
external inner procedure BeginCurncyTotals(var Integer);
external inner procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external inner procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external inner procedure HTInvTypes(Integer,Integer,Integer,Integer,var string);
external inner procedure HTDetailLevel(Integer, var string);
external inner procedure HTOKF(Integer,Integer, var string);
external inner procedure HTSaleMan(string, var string);
external inner procedure HTOBJ(string,var string);
external inner procedure HTNr(Integer,Integer,LongInt,LongInt,var string);
external inner procedure HTProjects(string,string,var string);
external inner procedure HTCustClass(string,var string);
external inner procedure HTCustClassType(string,var string);
external inner function Boolean SetInSet2(string,string);
external inner procedure ClassTypef(string,string,var Boolean);
external inner function Boolean HasObjects();
external inner function Boolean HasModNL();
external inner function Boolean HasIncomeAndExpenseBook();

function Boolean CheckAllInvoiceLines(string rowobj,string prcode,record VIVc VIr,Integer vivt,var val invval,var val vatval,var val ivnovat)
BEGIN
  row VIVc VIrw;
  Boolean res,rowf,prf;
  Integer i,rwcnt;
  record RoundBlock Rb;
  record VIVc tmpVIr;
  val t,tmpvatval;  

  if (nonblank(prcode)) or (nonblank(rowobj)) then begin
    RecordClear(tmpVIr);
    BlockLoad(Rb);
    invval = blankval;
    vatval = blankval;
    rwcnt = MatRowCnt(VIr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VIr,i,VIrw);
      rowf = false;
      prf = false;
      if (SetInSet(rowobj,VIrw.Objects)) then begin rowf = true; end;
      if ((prcode==VIrw.PRCode) or (blank(prcode))) then begin prf = true; end;
      if (rowf and prf) then begin
        switch (VIr.InvType) begin
          case 3:
            if (VIrw.stp!=6) then begin
  //            invval = invval - VIrw.Sum;
  //            vatval = vatval - Round(FindVAT(VIrw.VATCode,VIrw.Sum,0,0),GetVATRoundMode(Rb));
              MatRowPut(tmpVIr,MatRowCnt(tmpVIr),VIrw);
              tmpvatval = tmpvatval + (VIrw.Sum*VIr.VATVal)/VIr.PayVal;
            end;
          otherwise
            if (VIrw.stp!=6) then begin
  //            invval = invval + VIrw.Sum;
  //            vatval = vatval + FindVAT(VIrw.VATCode,VIrw.Sum,0,0);
              MatRowPut(tmpVIr,MatRowCnt(tmpVIr),VIrw);
              tmpvatval = tmpvatval + (VIrw.Sum*VIr.VATVal)/(VIr.PayVal-VIr.VATVal);
            end;
        end;
        res = true;
      end;  
    end;    
    VICalcVals(tmpVIr);
    VISumup(tmpVIr,t);
    if (blank(tmpvatval) or blank(VIr.VATVal)) then begin
      if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        invval = t;
        vatval = tmpVIr.CalcVATVal;
      end else begin
        invval = -t;
        vatval = tmpVIr.CalcVATVal;
      end;
    end else begin
      if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        invval = t;
        invval = invval - tmpVIr.CalcVATVal + tmpvatval;
        vatval = -tmpvatval;
      end else begin
        invval = -t;
        invval = invval - tmpVIr.CalcVATVal + tmpvatval;
        vatval = tmpvatval;
      end;
    end;
  end;
  if (VIr.ExportFlag==1) or (VIr.ExportFlag==2) then begin
    vatval = 0;
  end;
  if (nonblank(VIr.VATVal) and blank(tmpvatval)) then begin
    if (vatval!=VIr.VATVal) then begin
      switch (VIr.InvType) begin
        case kInvoiceTypeCredit:
          vatval = -VIr.VATVal;
        case kInvoiceTypeCreditSpecialSales:
          vatval = -VIr.VATVal;
        otherwise
          vatval = VIr.VATVal;
      end;
    end;
  end;
  if (invval==0) then begin
    invval = blankval;
  end;
  if (vatval==0) then begin
    vatval = blankval;
  end;
  ivnovat = invval;
  if (vivt!=kVATTypeReversed) then begin
    ivnovat = ivnovat - vatval;
  end;
  CheckAllInvoiceLines = res;
  RETURN;
END;

global
procedure VIJRn(record RcVc RepSpec)
begin
  Record VIVc VIr;
  Record ObjVc OBr;
  Record CUVc VEr;
  Boolean TrHs,Accs,test2f;
  Val TotSum, iv, ivnovat, rs,vatval;
  Boolean testf;
  LongInt afr,ato;
  String 255 tstr;
  Integer rw, rwcnt, i,vatcnt,cnt;
  Row VIVc VIrw;
  val invval;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;
  LongInt runnr;
  string 255 frcredacc,tocredacc;
  string 255 frcacc,tocacc;
  Integer vivt;
  record SMVc VATr;
  record SMVc TotVATr;
  row SMVc VATrw;
  val vatv,t1;

  RecordClear(TotVATr);
  SetupVATBase(TotVATr,vatcnt);          
  runnr = 1;
  TotSum = 0;
  iv = 0;
  ivnovat = 0;
  rs = 0;
  vatval = 0;
  afr = FirstInRange(RepSpec.f1,30);
  ato = LastInRange(RepSpec.f1,30);
  frcacc = FirstInRange(RepSpec.f7,10);
  tocacc = LastInRange(RepSpec.f7,10);
  frcredacc = FirstInRange(RepSpec.f8,10);
  tocredacc = LastInRange(RepSpec.f8,10);
  TotSum = 0;
  BeginCurncyTotals(curcnt);
  StartReportJob(USetStr(4001));
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (RepSpec.flags[11]==1) then begin
    Header(rw,USetStr(4135),0);
  end;
  switch (RepSpec.ArtMode) begin
    case 2:
      tstr = USetStr(36180);
    case 3:
      tstr = USetStr(36181);
    otherwise
      tstr = "";
      HTDetailLevel(RepSpec.ArtMode,tstr);
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  if nonblank(RepSpec.f1) then begin
      HTNr(1111,1112,afr,ato,tstr);
      Header(rw,tstr,1);
     rw = rw + 1;
  end;
  if nonblank(RepSpec.f2) then begin
   tstr = USetStr(4004) & ": ";
   tstr = tstr & RepSpec.f2;
   Header(rw,tstr,1);
   rw = rw + 1;
  end;
  if nonblank(RepSpec.f3) then begin
   tstr = USetStr(6007) & ": ";
   tstr = tstr & RepSpec.f3;
   Header(rw,tstr,1);
   rw = rw + 1;
  end;
  HTOKF(RepSpec.flags[1],RepSpec.flags[2],tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTInvTypes(RepSpec.flags[3],RepSpec.flags[4],RepSpec.flags[5],RepSpec.flags[6],tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  if (HasCategories) then begin
    HTLevCat(RepSpec.f9,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  if (HasContactClassification) then begin
    HTCustClass(RepSpec.f4,tstr);
    if (nonblank(tstr)) then begin
      Header(rw,tstr,1);
      rw = rw + 1;
    end;
  end;
  HTCustClassType(RepSpec.f5,tstr);
  if (nonblank(tstr)) then begin
    Header(rw,tstr,1);
    rw = rw + 1;
  end; 
  if (nonblank(RepSpec.AccStr)) then begin
    HTSaleMan(RepSpec.AccStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.ObjStr)) then begin
    HTOBJ(RepSpec.ObjStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.TransStr)) then begin
    HTProjects(RepSpec.TransStr,RepSpec.TransStr,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  if (nonblank(RepSpec.f6)) then begin
    HTOBJ(RepSpec.f6,tstr);
    Header(rw,tstr,1);
    rw = rw + 1;
  end;
  EndHeader;
  SetRepColBiDi(5,320,360);
  SetRepColBiDi(6,400,440);
  SetRepColBiDi(7,450,490);
  if (RepSpec.ArtMode==0) then begin
    SetRepCol(2,70);
    SetRepCol(3,140);
    SetRepCol(4,220);
    StartFormat(15);
    OutString(0,0,USetStr(4002),false);
    OutString(2,0,USetStr(4003),false);
    OutString(3,0,USetStr(4007),false);//140
    OutString(4,0,USetStr(4004),false);//200
    OutString(400,0,USetStr(4005),true);//400
    if (HasApprovals) then begin
      OutString(440,0,UsetStr(6007),false);//430
    end;
    EndFormat;
    Gray_Divider(0,1);
  end;
  if (RepSpec.ArtMode==2 or RepSpec.ArtMode==3) then begin
    StartFormat(15);
    OutString(0,0,USetStr(4002),false);
    OutString(55,0,USetStr(4003),false);
    OutString(110,0,USetStr(4007),false);//140
    OutString(200,0,USetStr(4004),false);//200
    OutStringAdjust(5,0,USetStr(2356),true,M4Val);//400
    OutStringAdjust(6,0,USetStr(2328),true,M4Val);//400
    OutStringAdjust(7,0,USetStr(2329),true,M4Val);//430
    EndFormat;
    Gray_Divider(0,1);
  end;
  if (RepSpec.ArtMode==1) then begin
    SetRepCol(2,70);
    SetRepCol(3,140);
    SetRepCol(4,220);
    StartFormat(15);
    OutString(0,0,USetStr(4002),false);
    OutString(2,0,USetStr(4003),false);
    OutString(3,0,USetStr(4007),false);
    OutString(4,0,USetStr(4004),false);//200
    OutStringAdjustBiDi(400,0,USetStr(4005),true,M4Val,440);
    if (HasApprovals) then begin
      OutString(430,0,UsetStr(6007),false);
    end;
    StartFormat(15);
    EndFormat;
    if (HasModNL or HasIncomeAndExpenseBook) then begin
      OutString(20,0,USetStr(7065),false);
    end;
    if (HasObjects) then begin
      OutString(80,0,USetStr(2411),false);
    end;
    OutString(150,0,USetStr(2504),false);
    EndFormat;
    Gray_Divider(0,1);
  end;
  VIr.SerNr = afr;
  TrHs = true;
  while LoopMain(VIr,1,TrHs) begin
    if (ato<>-1) then begin
      if (VIr.SerNr>ato) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = false;
      if (VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        VIr.InvType = kInvoiceTypeCredit;
      end;
      if ((VIr.InvType<kInvoiceTypeNormal) or (VIr.InvType>kInvoiceTypeCredit)) then begin
        VIr.InvType = kInvoiceTypeNormal;
      end;
      if (blank(RepSpec.f2) or (RepSpec.f2==VIr.VECode)) then begin
        if ((RepSpec.flags[1]<>0 and (VIr.OKFlag==0)) or (RepSpec.flags[2]<>0 and (VIr.OKFlag<>0))) then begin
          if ((RepSpec.flags[3]<>0 and (VIr.InvType==kInvoiceTypeNormal or VIr.InvType==kInvoiceTypeNormalSpecialSales)) or 
          (RepSpec.flags[4]<>0 and (VIr.InvType==kInvoiceTypeCash or VIr.InvType==kInvoiceTypeCashInvoiceReceiptPRT)) or (RepSpec.flags[5]<>0 and (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales))) then begin
            testf = true;
          end;
        end;
      end;
      if (nonblank(RepSpec.AccStr)) then begin
        if (SetInSet(RepSpec.AccStr,VIr.SalesMan)==false) then begin testf = false; end;
      end;  
      if (nonblank(RepSpec.Stext)) then begin
        if (RepSpec.Stext<>VIr.SalesGroup) then begin testf = false; end;
      end;  
      if (nonblank(RepSpec.f3)) then begin
        if (RepSpec.f3<>VIr.OKPersons) then begin testf = false; end;
      end;  
      if ((RepSpec.flags[10]==1) and (VIr.PrelBook==0)) then begin
         testf = false;
      end;
      if ((RepSpec.flags[11]==1) and (VIr.Closed==0)) then begin
        testf = false;
      end;
      if nonblankdate(RepSpec.sStartDate) then begin
//cust start   January 28, 2014 by PST
       //  if VIr.TransDate<RepSpec.sStartDate then begin
       if (VIr.InvDate<RepSpec.sStartDate) then begin
//cust end January 28, 2014 by PST
           testf = false;
         end;
      end;
      if nonblankdate(RepSpec.sEndDate) then begin
//cust start   January 28, 2014 by PST
        //if VIr.TransDate>RepSpec.sEndDate then begin
        if (VIr.InvDate>RepSpec.sEndDate) then begin
//cust end January 28, 2014 by PST
          testf = false;
        end;
      end;
//CUST-BEGIN
      if (nonblank(RepSpec.Period2Str2) and DateInRange(VIr.TransDate,RepSpec.sStartDate2,RepSpec.sEndDate2)==false) then begin
        testf = false;
      end;
//CUST-END
      if (nonblank(RepSpec.vals0)) then begin
        rs = MulRateToBase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
        if (repSPec.vals0>rs) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        testf = ContactInGroupClass2(VIr.VECode,RepSpec.f9,RepSpec.f4,RepSpec.f5,"SUPP","","");
      end;
      if (nonblank(RepSpec.ObjStr)) then begin    
        if (SetInSet(RepSpec.ObjStr,VIr.Objects)==false) then begin        
          testf = false; 
        end; 
      end;  
      if (nonblank(RepSpec.f8)) then begin
        if (VIr.APAcc<frcredacc) or (VIr.APAcc>tocredacc) then begin
          testf = false;
        end;
      end;
      if ((testf==true) and (nonblank(RepSpec.ObjType))) then begin
        testf = false;
        OBr.OTCode = RepSpec.ObjType;
        OBr.Code = "";
        Accs = true;
        ResetLoop(OBr);
        while (LoopKey("OTCode",OBr,1,Accs)) begin
          if ((Accs==true) and (RepSpec.ObjType==OBr.OTCode)) then begin              
            if (SetInSet(OBr.Code,VIr.Objects)==true) then begin
              testf = true;
              Accs = false;
            end;
          end;
        end; 
      end;
      if (nonblankdate(RepSpec.d1)) then begin
        if (VIr.RcvDate<RepSpec.d1) then begin testf = false; end;
      end;
      if (RepSpec.ArtMode==1) then begin
        if (testf) then begin
          if (nonblank(RepSpec.f7)) then begin
            testf = false;
            rwcnt = MatRowCnt(VIr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(VIr,i,VIrw);
              if (VIrw.AccNumber>=frcacc) and (VIrw.AccNumber<=tocacc) then begin 
                testf = true;              
                i = rwcnt;
              end; 
            end;
          end;
        end;        
      end;
      if (testf) then begin
        RecordClear(VATr);
        SetupVATBase(VATr,vatcnt);          
        rwcnt = MatRowCnt(VIr);
        if (rwcnt>0) then begin
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(VIr,i,VIrw);
            if (VIrw.ovst==0) then begin
              if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                AddVATBase(VATr,VIrw.VATCode,-VIrw.Sum,blankval,vatcnt,0,0);
                AddVATBase(TotVATr,VIrw.VATCode,-VIrw.Sum,blankval,vatcnt,0,0);
              end else begin
                AddVATBase(VATr,VIrw.VATCode,VIrw.Sum,blankval,vatcnt,0,0);
                AddVATBase(TotVATr,VIrw.VATCode,VIrw.Sum,blankval,vatcnt,0,0);
              end;
              vivt = VATType(VIrw.VATCode);
              if (vivt==kVATTypeReversed) then begin
                i = rwcnt;
              end;
            end;
          end;
        end;

        iv = VIr.PayVal;
        if (blank(VIr.VATVal) and (VIr.CalcVATVal <> 0 )) then begin
          vatval = VIr.CalcVATVal;
        end else begin
          vatval = VIr.VATVal;
        end;
        if (VIr.ExportFlag==1) or (VIr.ExportFlag==2) then begin
          vatval = 0;
        end;        
        if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
           iv = -iv;
           ivnovat = -ivnovat;
           vatval = -vatval;
        end;
        test2f = CheckAllInvoiceLines(RepSpec.f6,RepSpec.TransStr,VIr,vivt,iv,vatval,ivnovat);        
        if ((nonblank(RepSpec.f6)) or (nonblank(RepSpec.TransStr))) then begin
          if (test2f==false) then begin
            goto L77;
          end;
        end;      
        rs = MulRateToBase1(VIr.CurncyCode,iv,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
        if (VIr.Invalid==0) then begin
          TotSum = TotSum + rs;
        end;
        if (RepSpec.ArtMode==0) then begin
          StartFormat(15);
          OutLongIntOvst(0,"DblVIVc",VIr.SerNr,false,VIr.Invalid);
          OutDateOvst(2,0,VIr.InvDate,false,VIr.Invalid);
          OutStringOvst(3,0,VIr.InvoiceNr,false,VIr.Invalid);
          OutStringOvst(4,0,VIr.VEName,false,VIr.Invalid);
          OutValOvstBiDi(400,0,iv,M4Val,true,VIr.Invalid,445);
          OutStringOvst(415,0,VIr.CurncyCode,false,VIr.Invalid);
          OutStringOvst(450,0,VIr.OKPersons,false,VIr.Invalid);
          EndFormat;
          if (VIr.Invalid==0) then begin
            AddCurncyTotals(acur,av1,curcnt,VIr.CurncyCode,ivnovat);
            AddCurncyTotals(acur,av2,curcnt,VIr.CurncyCode,iv);
            AddCurncyTotals(acur,av3,curcnt,VIr.CurncyCode,vatval);
          end;
        end;
        if (RepSpec.ArtMode==2) then begin
          StartFormat(15);
          OutLongIntOvst(0,"DblVIVc",VIr.SerNr,false,VIr.Invalid);
          OutDateOvst(55,0,VIr.InvDate,false,VIr.Invalid);
          OutStringOvst(110,0,VIr.InvoiceNr,false,VIr.Invalid);
          OutStringOvst(170,0,VIr.VEName,false,VIr.Invalid);
          OutValOvstBiDi(5,0,vatval,M4Val,true,VIr.Invalid,5);
          OutValOvstBiDi(6,0,ivnovat,M4Val,true,VIr.Invalid,6);
          OutValOvstBiDi(7,0,iv,M4Val,true,VIr.Invalid,7);
          OutStringOvst(1,0,VIr.CurncyCode,true,VIr.Invalid);
          EndFormat;
          if (VIr.Invalid==0) then begin
            AddCurncyTotals(acur,av1,curcnt,VIr.CurncyCode,ivnovat);
            AddCurncyTotals(acur,av2,curcnt,VIr.CurncyCode,iv);
            AddCurncyTotals(acur,av3,curcnt,VIr.CurncyCode,vatval);
          end;
        end;
        if (RepSpec.ArtMode==3) then begin
          StartFormat(15);
          OutLongIntOvst(0,"DblVIVc",VIr.SerNr,false,VIr.Invalid);
          OutDateOvst(55,0,VIr.InvDate,false,VIr.Invalid);
          OutStringOvst(110,0,VIr.InvoiceNr,false,VIr.Invalid);
          OutStringOvst(170,0,VIr.VEName,false,VIr.Invalid);
          cnt = 0;
          testf = true;
          rwcnt = MatRowCnt(VATr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(VATr,i,VATrw);
            if (VATrw.DebVal!=0) then begin
              MulVATIV(VATrw.VATCode,VATrw.DebVal,vatv,t1,0,0);
              OutValOvstBiDi(5,0,vatv,M4Val,true,VIr.Invalid,5);
              OutValOvstBiDi(6,0,VATrw.DebVal,M4Val,true,VIr.Invalid,6);
              OutValOvstBiDi(7,0,VATrw.DebVal+vatv,M4Val,true,VIr.Invalid,7);
              if (testf) then begin
                OutStringOvst(1,0,VIr.CurncyCode,true,VIr.Invalid);
                if (cnt>1) then begin
                  EndFormat;
                end;
                testf = false;
              end;
              if (cnt>1) then begin
                StartFormat(15);
              end;
            end;
          end;
          EndFormat;
          if (VIr.Invalid==0) then begin
            AddCurncyTotals(acur,av1,curcnt,VIr.CurncyCode,ivnovat);
            AddCurncyTotals(acur,av2,curcnt,VIr.CurncyCode,iv);
            AddCurncyTotals(acur,av3,curcnt,VIr.CurncyCode,vatval);
          end;
        end;
        if (RepSpec.ArtMode==1) then begin
          Gray_Divider(0,1);
          StartFormat(15);
//          OutLongInt(0,0,runnr,false);
          runnr = runnr + 1;
          OutLongIntOvst(0,"DblVIVc",VIr.SerNr,false,VIr.Invalid);
          OutDateOvst(2,0,VIr.InvDate,false,VIr.Invalid);
          OutStringOvst(3,0,VIr.InvoiceNr,false,VIr.Invalid);
          OutStringOvst(4,0,Left(VIr.VEName,25),false,VIr.Invalid);
          OutValOvstBiDi(400,0,iv,M4Val,true,VIr.Invalid,440);
          OutStringOvst(405,0,VIr.CurncyCode,false,VIr.Invalid);
          OutStringOvst(430,0,VIr.OKPersons,false,VIr.Invalid);
          EndFormat;
          if (VIr.Invalid==0) then begin
            AddCurncyTotals(acur,av1,curcnt,VIr.CurncyCode,ivnovat);
            AddCurncyTotals(acur,av2,curcnt,VIr.CurncyCode,iv);
            AddCurncyTotals(acur,av3,curcnt,VIr.CurncyCode,vatval);
          end;
          StartFormat(15);
          OutDateOvst(2,0,VIr.TransDate,false,VIr.Invalid);
          OutDateOvst(3,0,VIr.RcvDate,false,VIr.Invalid);
          switch (VIr.InvType) begin
            case kInvoiceTypeCredit:
              OutStringOvst(4,0,USetStr(4013),false,VIr.Invalid);
            case kInvoiceTypeCash:
              OutStringOvst(4,0,USetStr(4012),false,VIr.Invalid);
            otherwise
              OutStringOvst(4,0,USetStr(4011),false,VIr.Invalid);
          end;
          OutStringOvst(300,0,USetStr(6707),false,VIr.Invalid);
          OutValOvstBiDi(400,0,vatval,M4Val,true,VIr.Invalid,440);
          EndFormat;
          rwcnt = MatRowCnt(VIr);
          for (i=0; i<rwcnt; i=i+1) begin
            MatRowGet(VIr,i,VIrw);
            if (VIrw.stp==1) then begin
              testf = true;
              if ((nonblank(RepSpec.f6)) and (SetInSet(RepSpec.f6,VIrw.Objects)==false)) then begin 
                testf = false;
              end;
              if ((nonblank(RepSpec.TransStr)) and (SetInSet(RepSpec.TransStr,VIrw.PRCode)==false)) then begin 
                testf = false;
              end;
              if (nonblank(RepSpec.f7)) then begin
                if (VIrw.AccNumber<frcacc) or (VIrw.AccNumber>tocacc) then begin
                  testf = false;
                end; 
              end;              
              if (testf) then begin
                StartFormat(15);
                if (HasModNL or HasIncomeAndExpenseBook) then begin
                  OutStringOvst(20,0,VIrw.AccNumber,false,VIr.Invalid);
                end;
                if (HasObjects) then begin
                  OutStringOvst(80,0,VIrw.Objects,false,VIr.Invalid);
                end;
                OutStringOvst(150,0,VIrw.Comment,false,VIr.Invalid);
                if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                  OutValOvstBiDi(400,0,-VIrw.Sum,M4Val,true,VIr.Invalid,440);
                end else begin
                  OutValOvstBiDi(400,0,VIrw.Sum,M4Val,true,VIr.Invalid,440);
                end;
                OutStringOvst(1,0,VIrw.VATCode,true,VIr.Invalid);
                EndFormat;
              end;
            end;
          end;
        end;
      end;
    end;
L77:;
  end;
  Gray_Divider(0,1);
  if (RepSpec.ArtMode==3) then begin
    StartFormat(15);
    rwcnt = MatRowCnt(TotVATr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TotVATr,i,VATrw);
      if (VATrw.DebVal!=0) then begin
        GetVATdouble(VATrw.VATCode,vatv,t1,0);
        OutStringOvst(230,0,vatv,true,0);
        MulVATIV(VATrw.VATCode,VATrw.DebVal,vatv,t1,0,0);
        OutValOvstBiDi(5,0,vatv,M4Val,true,0,5);
        OutValOvstBiDi(6,0,VATrw.DebVal,M4Val,true,0,6);
        OutValOvstBiDi(7,0,VATrw.DebVal+vatv,M4Val,true,0,7);
      end;
    end;
    EndFormat;
  end;
  Gray_Divider(0,1);
  OutStringAdjust(5,0,USetStr(2356),true,M4Val);
  OutStringAdjust(6,0,USetStr(2328),true,M4Val);
  OutStringAdjust(7,0,USetStr(2329),true,M4Val);
  PrintCurncyTotals(acur,av3,av1,av2,curcnt,5,6,7,210,true,RepSpec.PocketPC);
  EndJob;
return;
end;
